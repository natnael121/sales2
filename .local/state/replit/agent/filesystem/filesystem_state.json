{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const now = new Date();\n    const user: User = { ...insertUser, id, createdAt: now, updatedAt: now };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1050},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User Roles\nexport type UserRole = \"admin\" | \"supervisor\" | \"call-center\" | \"field-agent\";\n\n// Lead Status Types\nexport type LeadStatus = \"new\" | \"contacted\" | \"interested\" | \"meeting\" | \"converted\" | \"closed\";\n\n// Call Outcome Types\nexport type CallOutcome = \"picked-interested\" | \"picked-not-interested\" | \"picked-meeting-setup\" | \"picked-call-later\" | \"not-picked-switched-off\" | \"not-picked-no-answer\" | \"not-picked-wrong-number\";\n\n// Meeting Result Types\nexport type MeetingResult = \"interested\" | \"not-interested\" | \"purchase\" | \"follow-up\";\n\n// Organization Schema\nexport const organizationSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertOrganizationSchema = organizationSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Organization = z.infer<typeof organizationSchema>;\nexport type InsertOrganization = z.infer<typeof insertOrganizationSchema>;\n\n// User Schema\nexport const userSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  name: z.string(),\n  role: z.enum([\"admin\", \"supervisor\", \"call-center\", \"field-agent\"]),\n  organizationId: z.string(),\n  supervisorId: z.string().optional(),\n  isActive: z.boolean().default(true),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertUserSchema = userSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\n// Lead Schema\nexport const leadSchema = z.object({\n  id: z.string(),\n  organizationId: z.string(),\n  assignedToId: z.string().optional(),\n  name: z.string(),\n  company: z.string().optional(),\n  email: z.string().email().optional(),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  status: z.enum([\"new\", \"contacted\", \"interested\", \"meeting\", \"converted\", \"closed\"]),\n  source: z.string().optional(),\n  notes: z.string().optional(),\n  estimatedValue: z.number().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertLeadSchema = leadSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Lead = z.infer<typeof leadSchema>;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\n\n// Call Schema\nexport const callSchema = z.object({\n  id: z.string(),\n  leadId: z.string(),\n  agentId: z.string(),\n  organizationId: z.string(),\n  outcome: z.enum([\"picked-interested\", \"picked-not-interested\", \"picked-meeting-setup\", \"picked-call-later\", \"not-picked-switched-off\", \"not-picked-no-answer\", \"not-picked-wrong-number\"]),\n  duration: z.number().optional(),\n  notes: z.string().optional(),\n  scheduledCallback: z.date().optional(),\n  createdAt: z.date(),\n});\n\nexport const insertCallSchema = callSchema.omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Call = z.infer<typeof callSchema>;\nexport type InsertCall = z.infer<typeof insertCallSchema>;\n\n// Meeting Schema\nexport const meetingSchema = z.object({\n  id: z.string(),\n  leadId: z.string(),\n  agentId: z.string(),\n  fieldAgentId: z.string().optional(),\n  organizationId: z.string(),\n  scheduledAt: z.date(),\n  duration: z.number().optional(),\n  location: z.string().optional(),\n  latitude: z.number().optional(),\n  longitude: z.number().optional(),\n  result: z.enum([\"interested\", \"not-interested\", \"purchase\", \"follow-up\"]).optional(),\n  notes: z.string().optional(),\n  photos: z.array(z.string()).optional(),\n  isCompleted: z.boolean().default(false),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertMeetingSchema = meetingSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Meeting = z.infer<typeof meetingSchema>;\nexport type InsertMeeting = z.infer<typeof insertMeetingSchema>;\n\n// Commission Schema\nexport const commissionSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  organizationId: z.string(),\n  leadId: z.string().optional(),\n  meetingId: z.string().optional(),\n  type: z.enum([\"meeting\", \"conversion\", \"purchase\", \"bonus\"]),\n  amount: z.number(),\n  isApproved: z.boolean().default(false),\n  approvedBy: z.string().optional(),\n  approvedAt: z.date().optional(),\n  createdAt: z.date(),\n});\n\nexport const insertCommissionSchema = commissionSchema.omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Commission = z.infer<typeof commissionSchema>;\nexport type InsertCommission = z.infer<typeof insertCommissionSchema>;\n\n// Chat Message Schema\nexport const chatMessageSchema = z.object({\n  id: z.string(),\n  organizationId: z.string(),\n  senderId: z.string(),\n  recipientId: z.string().optional(),\n  leadId: z.string().optional(),\n  groupId: z.string().optional(),\n  message: z.string(),\n  type: z.enum([\"direct\", \"group\", \"lead\"]).default(\"direct\"),\n  isRead: z.boolean().default(false),\n  createdAt: z.date(),\n});\n\nexport const insertChatMessageSchema = chatMessageSchema.omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type ChatMessage = z.infer<typeof chatMessageSchema>;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\n// Analytics/Metrics Types\nexport interface DashboardMetrics {\n  totalLeads: number;\n  conversionRate: number;\n  activeAgents: number;\n  revenue: number;\n}\n\nexport interface ConversionFunnelData {\n  leads: number;\n  contacted: number;\n  meetings: number;\n  conversions: number;\n}\n\nexport interface TopPerformer {\n  id: string;\n  name: string;\n  role: UserRole;\n  conversions: number;\n  growth: number;\n}\n\nexport interface RecentActivityItem {\n  id: string;\n  type: \"call\" | \"meeting\" | \"conversion\";\n  agentName: string;\n  leadName: string;\n  action: string;\n  timestamp: Date;\n}\n","size_bytes":5689},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"./contexts/AuthContext\";\nimport { ThemeProvider } from \"./contexts/ThemeContext\";\nimport { useAuth } from \"./hooks/useAuth\";\nimport { LoginModal } from \"./components/auth/LoginModal\";\nimport Dashboard from \"./pages/Dashboard\";\nimport Leads from \"./pages/Leads\";\nimport Calls from \"./pages/Calls\";\nimport Meetings from \"./pages/Meetings\";\nimport Commissions from \"./pages/Commissions\";\nimport Analytics from \"./pages/Analytics\";\nimport Settings from \"./pages/Settings\";\nimport NotFound from \"./pages/not-found\";\nimport { useState, useEffect } from \"react\";\n\nfunction AppContent() {\n  const { currentUser, loading } = useAuth();\n  const [showLoginModal, setShowLoginModal] = useState(false);\n\n  useEffect(() => {\n    if (!loading && !currentUser) {\n      // Show login modal after a short delay to avoid flash\n      const timer = setTimeout(() => {\n        setShowLoginModal(true);\n      }, 500);\n      return () => clearTimeout(timer);\n    } else if (currentUser) {\n      setShowLoginModal(false);\n    }\n  }, [currentUser, loading]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentUser) {\n    return (\n      <>\n        <div className=\"min-h-screen flex items-center justify-center bg-background\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\">Sales Management System</h1>\n            <p className=\"text-muted-foreground\">Please sign in to continue</p>\n          </div>\n        </div>\n        <LoginModal \n          isOpen={showLoginModal} \n          onClose={() => setShowLoginModal(false)} \n        />\n      </>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/leads\" component={Leads} />\n      <Route path=\"/calls\" component={Calls} />\n      <Route path=\"/meetings\" component={Meetings} />\n      <Route path=\"/commissions\" component={Commissions} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <TooltipProvider>\n            <Toaster />\n            <AppContent />\n          </TooltipProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2987},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(249, 10%, 98%);\n  --foreground: hsl(220, 13%, 15%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 13%, 15%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 13%, 15%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 14%, 96%);\n  --secondary-foreground: hsl(220, 9%, 46%);\n  --muted: hsl(220, 14%, 96%);\n  --muted-foreground: hsl(220, 9%, 46%);\n  --accent: hsl(220, 14%, 96%);\n  --accent-foreground: hsl(220, 13%, 15%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(32, 95%, 44%);\n  --chart-4: hsl(0, 84%, 60%);\n  --chart-5: hsl(262, 83%, 58%);\n  --sidebar: hsl(220, 14%, 96%);\n  --sidebar-foreground: hsl(220, 13%, 15%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(220, 14%, 96%);\n  --sidebar-accent-foreground: hsl(221, 83%, 53%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n}\n\n.dark {\n  --background: hsl(220, 13%, 15%);\n  --foreground: hsl(220, 14%, 96%);\n  --card: hsl(224, 71%, 4%);\n  --card-foreground: hsl(220, 14%, 96%);\n  --popover: hsl(224, 71%, 4%);\n  --popover-foreground: hsl(220, 14%, 96%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(220, 13%, 15%);\n  --secondary: hsl(215, 27%, 32%);\n  --secondary-foreground: hsl(210, 20%, 98%);\n  --muted: hsl(215, 27%, 17%);\n  --muted-foreground: hsl(217, 10%, 64%);\n  --accent: hsl(215, 27%, 17%);\n  --accent-foreground: hsl(220, 14%, 96%);\n  --destructive: hsl(0, 63%, 71%);\n  --destructive-foreground: hsl(220, 13%, 15%);\n  --border: hsl(215, 27%, 17%);\n  --input: hsl(215, 27%, 17%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(32, 95%, 44%);\n  --chart-4: hsl(0, 84%, 60%);\n  --chart-5: hsl(262, 83%, 58%);\n  --sidebar: hsl(224, 71%, 4%);\n  --sidebar-foreground: hsl(220, 14%, 96%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(215, 27%, 17%);\n  --sidebar-accent-foreground: hsl(217, 91%, 60%);\n  --sidebar-border: hsl(215, 27%, 17%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":2831},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { onAuthStateChanged, User as FirebaseUser } from \"firebase/auth\";\nimport { auth } from \"../lib/firebase\";\nimport { getUser } from \"../lib/firestore\";\nimport type { AppUser } from \"../types\";\n\ninterface AuthContextType {\n  currentUser: AppUser | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<void>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuthContext = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState<AppUser | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const signIn = async (email: string, password: string) => {\n    const { signIn: firebaseSignIn } = await import(\"../lib/auth\");\n    const user = await firebaseSignIn(email, password);\n    setCurrentUser(user);\n  };\n\n  const signOut = async () => {\n    const { signOut: firebaseSignOut } = await import(\"../lib/auth\");\n    await firebaseSignOut();\n    setCurrentUser(null);\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser: FirebaseUser | null) => {\n      if (firebaseUser) {\n        try {\n          const appUser = await getUser(firebaseUser.uid);\n          if (appUser) {\n            setCurrentUser({\n              uid: firebaseUser.uid,\n              displayName: firebaseUser.displayName,\n              photoURL: firebaseUser.photoURL,\n              ...appUser\n            });\n          } else {\n            setCurrentUser(null);\n          }\n        } catch (error) {\n          console.error(\"Error fetching user data:\", error);\n          setCurrentUser(null);\n        }\n      } else {\n        setCurrentUser(null);\n      }\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value: AuthContextType = {\n    currentUser,\n    loading,\n    signIn,\n    signOut\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","size_bytes":2341},"client/src/contexts/ThemeContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport type { Theme } from \"../types\";\n\nconst ThemeContext = createContext<Theme | undefined>(undefined);\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [isDark, setIsDark] = useState(false);\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"theme\");\n    const isDarkStored = stored === \"dark\";\n    setIsDark(isDarkStored);\n    \n    if (isDarkStored) {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, []);\n\n  const toggle = () => {\n    const newTheme = !isDark;\n    setIsDark(newTheme);\n    localStorage.setItem(\"theme\", newTheme ? \"dark\" : \"light\");\n    \n    if (newTheme) {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  };\n\n  const value: Theme = {\n    isDark,\n    toggle\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n","size_bytes":1357},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useAuth as useAuthContext } from \"../contexts/AuthContext\";\n\nexport const useAuth = useAuthContext;\n","size_bytes":109},"client/src/hooks/useFirestore.ts":{"content":"import { useState, useEffect } from \"react\";\nimport type { Lead, Meeting, Commission, ChatMessage, Call } from \"../types\";\nimport * as firestore from \"../lib/firestore\";\n\nexport const useLeads = (organizationId: string) => {\n  const [leads, setLeads] = useState<Lead[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!organizationId) return;\n\n    const unsubscribe = firestore.subscribeToLeads(organizationId, (newLeads) => {\n      setLeads(newLeads);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, [organizationId]);\n\n  return { leads, loading, error };\n};\n\nexport const useMeetings = (agentId: string) => {\n  const [meetings, setMeetings] = useState<Meeting[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!agentId) return;\n\n    const fetchMeetings = async () => {\n      try {\n        const data = await firestore.getMeetingsByAgent(agentId);\n        setMeetings(data);\n      } catch (error) {\n        console.error(\"Error fetching meetings:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMeetings();\n  }, [agentId]);\n\n  return { meetings, loading };\n};\n\nexport const useCommissions = (userId: string) => {\n  const [commissions, setCommissions] = useState<Commission[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!userId) return;\n\n    const fetchCommissions = async () => {\n      try {\n        const data = await firestore.getCommissionsByUser(userId);\n        setCommissions(data);\n      } catch (error) {\n        console.error(\"Error fetching commissions:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCommissions();\n  }, [userId]);\n\n  return { commissions, loading };\n};\n\nexport const useChatMessages = (organizationId: string) => {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!organizationId) return;\n\n    const unsubscribe = firestore.subscribeToChatMessages(organizationId, (newMessages) => {\n      setMessages(newMessages);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, [organizationId]);\n\n  return { messages, loading };\n};\n\n// Organization-level hooks for analytics\nexport const useCalls = (organizationId: string) => {\n  const [calls, setCalls] = useState<Call[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!organizationId) return;\n\n    const fetchCalls = async () => {\n      try {\n        const data = await firestore.getCallsByOrganization(organizationId);\n        setCalls(data);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching calls:\", error);\n        setError(\"Failed to fetch calls\");\n        setLoading(false);\n      }\n    };\n\n    fetchCalls();\n  }, [organizationId]);\n\n  return { calls, loading, error };\n};\n\nexport const useOrganizationMeetings = (organizationId: string) => {\n  const [meetings, setMeetings] = useState<Meeting[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!organizationId) return;\n\n    const fetchMeetings = async () => {\n      try {\n        const data = await firestore.getMeetingsByOrganization(organizationId);\n        setMeetings(data);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching organization meetings:\", error);\n        setError(\"Failed to fetch meetings\");\n        setLoading(false);\n      }\n    };\n\n    fetchMeetings();\n  }, [organizationId]);\n\n  return { meetings, loading, error };\n};\n","size_bytes":3782},"client/src/lib/auth.ts":{"content":"import { \n  signInWithEmailAndPassword, \n  signOut as firebaseSignOut,\n  createUserWithEmailAndPassword,\n  User as FirebaseUser\n} from \"firebase/auth\";\nimport { auth } from \"./firebase\";\nimport { createUser, getUser } from \"./firestore\";\nimport type { UserRole, AppUser } from \"../types\";\n\nexport const signIn = async (email: string, password: string): Promise<AppUser> => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const firebaseUser = userCredential.user;\n    \n    // Get user data from Firestore using uid\n    const appUser = await getUser(firebaseUser.uid);\n    if (!appUser) {\n      throw new Error(\"User data not found\");\n    }\n    \n    return {\n      uid: firebaseUser.uid,\n      displayName: firebaseUser.displayName,\n      photoURL: firebaseUser.photoURL,\n      ...appUser\n    };\n  } catch (error: any) {\n    throw new Error(error.message || \"Failed to sign in\");\n  }\n};\n\nexport const signUp = async (\n  email: string, \n  password: string, \n  name: string, \n  role: UserRole, \n  organizationId: string,\n  supervisorId?: string\n): Promise<AppUser> => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const firebaseUser = userCredential.user;\n    \n    // Create user document in Firestore\n    const userData = {\n      email,\n      name,\n      role,\n      organizationId,\n      supervisorId,\n      isActive: true\n    };\n    \n    const appUser = await createUser(firebaseUser.uid, userData);\n    \n    return {\n      uid: firebaseUser.uid,\n      displayName: firebaseUser.displayName,\n      photoURL: firebaseUser.photoURL,\n      ...appUser\n    };\n  } catch (error: any) {\n    throw new Error(error.message || \"Failed to create account\");\n  }\n};\n\nexport const signOut = async (): Promise<void> => {\n  try {\n    await firebaseSignOut(auth);\n  } catch (error: any) {\n    throw new Error(error.message || \"Failed to sign out\");\n  }\n};\n\nexport const getCurrentUser = (): FirebaseUser | null => {\n  return auth.currentUser;\n};\n","size_bytes":2034},"client/src/lib/demo-setup.ts":{"content":"import { createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { auth } from \"./firebase\";\nimport { createUser, createOrganization } from \"./firestore\";\nimport type { UserRole } from \"../types\";\n\n// Demo users for testing all roles\nconst DEMO_USERS = [\n  {\n    email: \"admin@salesapp.com\",\n    password: \"admin123\",\n    name: \"Admin User\",\n    role: \"admin\" as UserRole\n  },\n  {\n    email: \"supervisor@salesapp.com\", \n    password: \"supervisor123\",\n    name: \"Supervisor User\",\n    role: \"supervisor\" as UserRole\n  },\n  {\n    email: \"agent@salesapp.com\",\n    password: \"agent123\", \n    name: \"Call Center Agent\",\n    role: \"call-center\" as UserRole\n  },\n  {\n    email: \"field@salesapp.com\",\n    password: \"field123\",\n    name: \"Field Agent\",\n    role: \"field-agent\" as UserRole\n  }\n];\n\nexport const createDemoData = async (): Promise<void> => {\n  try {\n    console.log(\"Setting up demo data...\");\n    \n    // First, create and sign in as admin to ensure authenticated access\n    const adminUser = DEMO_USERS[0]; // Admin user\n    \n    console.log(`Creating admin user: ${adminUser.email}`);\n    \n    let adminCredential;\n    try {\n      // Create admin Firebase auth user\n      adminCredential = await createUserWithEmailAndPassword(\n        auth, \n        adminUser.email, \n        adminUser.password\n      );\n      console.log(\"Admin user created in Firebase Auth\");\n    } catch (error: any) {\n      if (error.code === 'auth/email-already-in-use') {\n        console.log(\"Admin user already exists, signing in...\");\n        const { signInWithEmailAndPassword } = await import(\"firebase/auth\");\n        adminCredential = await signInWithEmailAndPassword(auth, adminUser.email, adminUser.password);\n      } else {\n        throw error;\n      }\n    }\n    \n    // Now that we're authenticated, create the organization\n    console.log(\"Creating demo organization...\");\n    const organization = await createOrganization({\n      name: \"Demo Sales Organization\"\n    });\n    console.log(\"Created organization:\", organization.id);\n    \n    // Create admin user document in Firestore\n    await createUser(adminCredential.user.uid, {\n      email: adminUser.email,\n      name: adminUser.name,\n      role: adminUser.role,\n      organizationId: organization.id,\n      isActive: true\n    });\n    console.log(`Created admin user document: ${adminUser.name}`);\n    \n    // Create remaining users (skip admin since already created)\n    for (let i = 1; i < DEMO_USERS.length; i++) {\n      const demoUser = DEMO_USERS[i];\n      try {\n        console.log(`Creating user: ${demoUser.email}`);\n        \n        // Create Firebase auth user\n        const userCredential = await createUserWithEmailAndPassword(\n          auth, \n          demoUser.email, \n          demoUser.password\n        );\n        \n        // Create Firestore user document\n        await createUser(userCredential.user.uid, {\n          email: demoUser.email,\n          name: demoUser.name,\n          role: demoUser.role,\n          organizationId: organization.id,\n          supervisorId: demoUser.role === \"call-center\" || demoUser.role === \"field-agent\" ? adminCredential.user.uid : undefined,\n          isActive: true\n        });\n        \n        console.log(`Created user: ${demoUser.name} (${demoUser.role})`);\n        \n      } catch (error: any) {\n        if (error.code === 'auth/email-already-in-use') {\n          console.log(`User ${demoUser.email} already exists, skipping...`);\n        } else {\n          console.error(`Error creating user ${demoUser.email}:`, error);\n        }\n      }\n    }\n    \n    // Sign back in as admin to maintain consistent auth state\n    const { signInWithEmailAndPassword } = await import(\"firebase/auth\");\n    await signInWithEmailAndPassword(auth, adminUser.email, adminUser.password);\n    \n    console.log(\"Demo data setup complete! Signed in as admin.\");\n    \n  } catch (error) {\n    console.error(\"Error setting up demo data:\", error);\n    throw error;\n  }\n};\n\nexport const DEMO_CREDENTIALS = {\n  admin: { email: \"admin@salesapp.com\", password: \"admin123\" },\n  supervisor: { email: \"supervisor@salesapp.com\", password: \"supervisor123\" },\n  agent: { email: \"agent@salesapp.com\", password: \"agent123\" },\n  field: { email: \"field@salesapp.com\", password: \"field123\" }\n};","size_bytes":4263},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\nimport type { FirebaseConfig } from \"../types\";\n\nconst firebaseConfig: FirebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || \"AIzaSyC2bS6HoDzojroZJ3frN3BbAY_K8VSUhSU\",\n  authDomain: \"sales-app-97827.firebaseapp.com\",\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || \"sales-app-97827\",\n  storageBucket: \"sales-app-97827.firebasestorage.app\",\n  messagingSenderId: \"73800188659\",\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || \"1:73800188659:web:4fc733e3f5415c2b68ad86\",\n  measurementId: \"G-76W3SNVQPX\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const storage = getStorage(app);\n\nexport default app;\n","size_bytes":946},"client/src/lib/firestore.ts":{"content":"import {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  setDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit,\n  onSnapshot,\n  Timestamp,\n  QuerySnapshot,\n  DocumentData\n} from \"firebase/firestore\";\nimport { db } from \"./firebase\";\nimport type {\n  User,\n  InsertUser,\n  Organization,\n  InsertOrganization,\n  Lead,\n  InsertLead,\n  Call,\n  InsertCall,\n  Meeting,\n  InsertMeeting,\n  Commission,\n  InsertCommission,\n  ChatMessage,\n  InsertChatMessage\n} from \"../types\";\n\n// Helper function to convert Firestore timestamp to Date\nconst convertTimestamps = (data: any): any => {\n  const converted = { ...data };\n  Object.keys(converted).forEach(key => {\n    if (converted[key] instanceof Timestamp) {\n      converted[key] = converted[key].toDate();\n    }\n  });\n  return converted;\n};\n\n// Organizations\nexport const createOrganization = async (data: InsertOrganization): Promise<Organization> => {\n  const docRef = await addDoc(collection(db, \"organizations\"), {\n    ...data,\n    createdAt: new Date(),\n    updatedAt: new Date()\n  });\n  \n  const doc = await getDoc(docRef);\n  return { id: docRef.id, ...convertTimestamps(doc.data()) } as Organization;\n};\n\nexport const getOrganization = async (id: string): Promise<Organization | null> => {\n  const docRef = doc(db, \"organizations\", id);\n  const docSnap = await getDoc(docRef);\n  \n  if (docSnap.exists()) {\n    return { id: docSnap.id, ...convertTimestamps(docSnap.data()) } as Organization;\n  }\n  return null;\n};\n\n// Users\nexport const createUser = async (id: string, data: InsertUser): Promise<User> => {\n  const docRef = doc(db, \"users\", id);\n  const userData = {\n    ...data,\n    createdAt: new Date(),\n    updatedAt: new Date()\n  };\n  \n  await setDoc(docRef, userData);\n  return { id, ...userData } as User;\n};\n\nexport const getUserByEmail = async (email: string): Promise<User | null> => {\n  const q = query(collection(db, \"users\"), where(\"email\", \"==\", email));\n  const querySnapshot = await getDocs(q);\n  \n  if (!querySnapshot.empty) {\n    const doc = querySnapshot.docs[0];\n    return { id: doc.id, ...convertTimestamps(doc.data()) } as User;\n  }\n  return null;\n};\n\nexport const getUser = async (id: string): Promise<User | null> => {\n  const docRef = doc(db, \"users\", id);\n  const docSnap = await getDoc(docRef);\n  \n  if (docSnap.exists()) {\n    return { id: docSnap.id, ...convertTimestamps(docSnap.data()) } as User;\n  }\n  return null;\n};\n\nexport const getUsersByOrganization = async (organizationId: string): Promise<User[]> => {\n  const q = query(\n    collection(db, \"users\"), \n    where(\"organizationId\", \"==\", organizationId),\n    where(\"isActive\", \"==\", true)\n  );\n  const querySnapshot = await getDocs(q);\n  \n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...convertTimestamps(doc.data())\n  })) as User[];\n};\n\n// Leads\nexport const createLead = async (data: InsertLead): Promise<Lead> => {\n  const docRef = await addDoc(collection(db, \"leads\"), {\n    ...data,\n    createdAt: new Date(),\n    updatedAt: new Date()\n  });\n  \n  const docSnap = await getDoc(docRef);\n  return { id: docRef.id, ...convertTimestamps(docSnap.data()) } as Lead;\n};\n\nexport const updateLead = async (id: string, data: Partial<InsertLead>): Promise<void> => {\n  const docRef = doc(db, \"leads\", id);\n  await updateDoc(docRef, {\n    ...data,\n    updatedAt: new Date()\n  });\n};\n\nexport const deleteLead = async (id: string): Promise<void> => {\n  const docRef = doc(db, \"leads\", id);\n  await deleteDoc(docRef);\n};\n\nexport const getLeadsByOrganization = async (organizationId: string): Promise<Lead[]> => {\n  const q = query(\n    collection(db, \"leads\"), \n    where(\"organizationId\", \"==\", organizationId),\n    orderBy(\"createdAt\", \"desc\")\n  );\n  const querySnapshot = await getDocs(q);\n  \n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...convertTimestamps(doc.data())\n  })) as Lead[];\n};\n\nexport const getLeadsByAgent = async (agentId: string): Promise<Lead[]> => {\n  const q = query(\n    collection(db, \"leads\"), \n    where(\"assignedToId\", \"==\", agentId),\n    orderBy(\"createdAt\", \"desc\")\n  );\n  const querySnapshot = await getDocs(q);\n  \n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...convertTimestamps(doc.data())\n  })) as Lead[];\n};\n\n// Calls\nexport const createCall = async (data: InsertCall): Promise<Call> => {\n  const docRef = await addDoc(collection(db, \"calls\"), {\n    ...data,\n    createdAt: new Date()\n  });\n  \n  const docSnap = await getDoc(docRef);\n  return { id: docRef.id, ...convertTimestamps(docSnap.data()) } as Call;\n};\n\nexport const getCallsByLead = async (leadId: string): Promise<Call[]> => {\n  const q = query(\n    collection(db, \"calls\"), \n    where(\"leadId\", \"==\", leadId),\n    orderBy(\"createdAt\", \"desc\")\n  );\n  const querySnapshot = await getDocs(q);\n  \n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...convertTimestamps(doc.data())\n  })) as Call[];\n};\n\nexport const getCallsByAgent = async (agentId: string): Promise<Call[]> => {\n  const q = query(\n    collection(db, \"calls\"), \n    where(\"agentId\", \"==\", agentId),\n    orderBy(\"createdAt\", \"desc\")\n  );\n  const querySnapshot = await getDocs(q);\n  \n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...convertTimestamps(doc.data())\n  })) as Call[];\n};\n\nexport const getCallsByOrganization = async (organizationId: string): Promise<Call[]> => {\n  const q = query(\n    collection(db, \"calls\"), \n    where(\"organizationId\", \"==\", organizationId),\n    orderBy(\"createdAt\", \"desc\")\n  );\n  const querySnapshot = await getDocs(q);\n  \n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...convertTimestamps(doc.data())\n  })) as Call[];\n};\n\n// Meetings\nexport const createMeeting = async (data: InsertMeeting): Promise<Meeting> => {\n  const docRef = await addDoc(collection(db, \"meetings\"), {\n    ...data,\n    createdAt: new Date(),\n    updatedAt: new Date()\n  });\n  \n  const docSnap = await getDoc(docRef);\n  return { id: docRef.id, ...convertTimestamps(docSnap.data()) } as Meeting;\n};\n\nexport const updateMeeting = async (id: string, data: Partial<InsertMeeting>): Promise<void> => {\n  const docRef = doc(db, \"meetings\", id);\n  await updateDoc(docRef, {\n    ...data,\n    updatedAt: new Date()\n  });\n};\n\nexport const getMeetingsByAgent = async (agentId: string): Promise<Meeting[]> => {\n  const q = query(\n    collection(db, \"meetings\"), \n    where(\"fieldAgentId\", \"==\", agentId),\n    orderBy(\"scheduledAt\", \"asc\")\n  );\n  const querySnapshot = await getDocs(q);\n  \n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...convertTimestamps(doc.data())\n  })) as Meeting[];\n};\n\nexport const getMeetingsByOrganization = async (organizationId: string): Promise<Meeting[]> => {\n  const q = query(\n    collection(db, \"meetings\"), \n    where(\"organizationId\", \"==\", organizationId),\n    orderBy(\"createdAt\", \"desc\")\n  );\n  const querySnapshot = await getDocs(q);\n  \n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...convertTimestamps(doc.data())\n  })) as Meeting[];\n};\n\n// Commissions\nexport const createCommission = async (data: InsertCommission): Promise<Commission> => {\n  const docRef = await addDoc(collection(db, \"commissions\"), {\n    ...data,\n    createdAt: new Date()\n  });\n  \n  const docSnap = await getDoc(docRef);\n  return { id: docRef.id, ...convertTimestamps(docSnap.data()) } as Commission;\n};\n\nexport const getCommissionsByUser = async (userId: string): Promise<Commission[]> => {\n  const q = query(\n    collection(db, \"commissions\"), \n    where(\"userId\", \"==\", userId),\n    orderBy(\"createdAt\", \"desc\")\n  );\n  const querySnapshot = await getDocs(q);\n  \n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...convertTimestamps(doc.data())\n  })) as Commission[];\n};\n\n// Chat Messages\nexport const createChatMessage = async (data: InsertChatMessage): Promise<ChatMessage> => {\n  const docRef = await addDoc(collection(db, \"chat_messages\"), {\n    ...data,\n    createdAt: new Date()\n  });\n  \n  const docSnap = await getDoc(docRef);\n  return { id: docRef.id, ...convertTimestamps(docSnap.data()) } as ChatMessage;\n};\n\nexport const subscribeToChatMessages = (\n  organizationId: string,\n  callback: (messages: ChatMessage[]) => void\n): (() => void) => {\n  const q = query(\n    collection(db, \"chat_messages\"), \n    where(\"organizationId\", \"==\", organizationId),\n    orderBy(\"createdAt\", \"desc\"),\n    limit(50)\n  );\n  \n  return onSnapshot(q, (querySnapshot) => {\n    const messages = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...convertTimestamps(doc.data())\n    })) as ChatMessage[];\n    callback(messages);\n  });\n};\n\n// Real-time subscriptions\nexport const subscribeToLeads = (\n  organizationId: string,\n  callback: (leads: Lead[]) => void\n): (() => void) => {\n  const q = query(\n    collection(db, \"leads\"), \n    where(\"organizationId\", \"==\", organizationId),\n    orderBy(\"updatedAt\", \"desc\")\n  );\n  \n  return onSnapshot(q, (querySnapshot) => {\n    const leads = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...convertTimestamps(doc.data())\n    })) as Lead[];\n    callback(leads);\n  });\n};\n","size_bytes":9067},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Analytics.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Layout } from \"../components/layout/Layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell, AreaChart, Area } from \"recharts\";\nimport { Calendar, Users, Phone, MapPin, DollarSign, TrendingUp, Target, Clock, Award, Zap } from \"lucide-react\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { useLeads, useCalls, useOrganizationMeetings } from \"../hooks/useFirestore\";\nimport { getUsersByOrganization } from \"../lib/firestore\";\nimport type { User, Lead, Call, Meeting, UserRole } from \"../types\";\n\n// Chart colors\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];\n\nexport default function Analytics() {\n  const { currentUser } = useAuth();\n  const { leads, loading: leadsLoading } = useLeads(currentUser?.organizationId || \"\");\n  const { calls, loading: callsLoading } = useCalls(currentUser?.organizationId || \"\");\n  const { meetings, loading: meetingsLoading } = useOrganizationMeetings(currentUser?.organizationId || \"\");\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedPeriod, setSelectedPeriod] = useState(\"7d\");\n  const [usersLoading, setUsersLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      if (currentUser?.organizationId) {\n        try {\n          const orgUsers = await getUsersByOrganization(currentUser.organizationId);\n          setUsers(orgUsers);\n        } catch (error) {\n          console.error(\"Error fetching users:\", error);\n        } finally {\n          setUsersLoading(false);\n        }\n      }\n    };\n    fetchUsers();\n  }, [currentUser?.organizationId]);\n\n  // Compute overall loading state\n  const isLoading = leadsLoading || callsLoading || meetingsLoading || usersLoading;\n\n  // Helper function to filter data by period\n  const filterByPeriod = <T extends { createdAt: Date | string }>(data: T[], period: string): T[] => {\n    const now = new Date();\n    const startDate = new Date();\n    \n    switch (period) {\n      case \"7d\":\n        startDate.setDate(now.getDate() - 7);\n        break;\n      case \"30d\":\n        startDate.setDate(now.getDate() - 30);\n        break;\n      case \"90d\":\n        startDate.setDate(now.getDate() - 90);\n        break;\n      default:\n        startDate.setDate(now.getDate() - 7);\n    }\n    \n    return data.filter(item => {\n      // Ensure createdAt is a Date object\n      const itemDate = item.createdAt instanceof Date ? item.createdAt : new Date(item.createdAt);\n      return itemDate >= startDate;\n    });\n  };\n\n  // Filter data based on user role and selected period\n  const getFilteredData = () => {\n    if (!currentUser) return { leads: [], calls: [], meetings: [], users: [] };\n    \n    // First, normalize dates to ensure they are Date objects\n    const normalizeLeads = leads.map(lead => ({\n      ...lead,\n      createdAt: lead.createdAt instanceof Date ? lead.createdAt : new Date(lead.createdAt)\n    }));\n    \n    const normalizeCalls = calls.map(call => ({\n      ...call,\n      createdAt: call.createdAt instanceof Date ? call.createdAt : new Date(call.createdAt)\n    }));\n    \n    const normalizeMeetings = meetings.map(meeting => ({\n      ...meeting,\n      createdAt: meeting.createdAt instanceof Date ? meeting.createdAt : new Date(meeting.createdAt)\n    }));\n    \n    // Apply period filtering\n    const periodFilteredLeads = filterByPeriod(normalizeLeads, selectedPeriod);\n    const periodFilteredCalls = filterByPeriod(normalizeCalls, selectedPeriod);\n    const periodFilteredMeetings = filterByPeriod(normalizeMeetings, selectedPeriod);\n    \n    // Then apply role-based filtering\n    switch (currentUser.role) {\n      case \"admin\":\n        return { \n          leads: periodFilteredLeads, \n          calls: periodFilteredCalls, \n          meetings: periodFilteredMeetings, \n          users \n        };\n      case \"supervisor\":\n        const supervisedUsers = users.filter(u => u.supervisorId === currentUser.uid);\n        const supervisedUserIds = supervisedUsers.map(u => u.id);\n        return {\n          leads: periodFilteredLeads.filter(l => l.assignedToId && supervisedUserIds.includes(l.assignedToId)),\n          calls: periodFilteredCalls.filter((c: Call) => supervisedUserIds.includes(c.agentId)),\n          meetings: periodFilteredMeetings.filter((m: Meeting) => supervisedUserIds.includes(m.agentId)),\n          users: supervisedUsers\n        };\n      case \"call-center\":\n      case \"field-agent\":\n        return {\n          leads: periodFilteredLeads.filter(l => l.assignedToId === currentUser.uid),\n          calls: periodFilteredCalls.filter((c: Call) => c.agentId === currentUser.uid),\n          meetings: periodFilteredMeetings.filter((m: Meeting) => m.agentId === currentUser.uid || m.fieldAgentId === currentUser.uid),\n          users: [users.find(u => u.id === currentUser.uid)].filter(Boolean) as User[]\n        };\n      default:\n        return { leads: [], calls: [], meetings: [], users: [] };\n    }\n  };\n\n  const { leads: filteredLeads, calls: filteredCalls, meetings: filteredMeetings, users: filteredUsers } = getFilteredData();\n\n  // Generate analytics data\n  const getAnalyticsData = () => {\n    // Lead status distribution\n    const leadStatusData = [\n      { name: 'New', value: filteredLeads.filter(l => l.status === 'new').length, color: COLORS[0] },\n      { name: 'Contacted', value: filteredLeads.filter(l => l.status === 'contacted').length, color: COLORS[1] },\n      { name: 'Interested', value: filteredLeads.filter(l => l.status === 'interested').length, color: COLORS[2] },\n      { name: 'Meeting', value: filteredLeads.filter(l => l.status === 'meeting').length, color: COLORS[3] },\n      { name: 'Converted', value: filteredLeads.filter(l => l.status === 'converted').length, color: COLORS[4] },\n      { name: 'Closed', value: filteredLeads.filter(l => l.status === 'closed').length, color: COLORS[5] }\n    ].filter(item => item.value > 0);\n\n    // Call outcome distribution\n    const callOutcomeData = [\n      { name: 'Interested', value: filteredCalls.filter((c: Call) => c.outcome === 'picked-interested').length },\n      { name: 'Not Interested', value: filteredCalls.filter((c: Call) => c.outcome === 'picked-not-interested').length },\n      { name: 'Meeting Setup', value: filteredCalls.filter((c: Call) => c.outcome === 'picked-meeting-setup').length },\n      { name: 'Call Later', value: filteredCalls.filter((c: Call) => c.outcome === 'picked-call-later').length },\n      { name: 'No Answer', value: filteredCalls.filter((c: Call) => c.outcome.includes('not-picked')).length }\n    ].filter(item => item.value > 0);\n\n    // Performance metrics over time based on selected period\n    const getDaysInPeriod = (period: string) => {\n      switch (period) {\n        case \"7d\": return 7;\n        case \"30d\": return 30;\n        case \"90d\": return 90;\n        default: return 7;\n      }\n    };\n\n    const daysCount = getDaysInPeriod(selectedPeriod);\n    const periodDates = Array.from({ length: daysCount }, (_, i) => {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      return date.toISOString().split('T')[0];\n    }).reverse();\n\n    const performanceData = periodDates.map(date => {\n      const dayLeads = filteredLeads.filter(l => {\n        const leadDate = l.createdAt instanceof Date ? l.createdAt : new Date(l.createdAt);\n        return leadDate.toISOString().split('T')[0] === date;\n      }).length;\n      const dayCalls = filteredCalls.filter((c: Call) => {\n        const callDate = c.createdAt instanceof Date ? c.createdAt : new Date(c.createdAt);\n        return callDate.toISOString().split('T')[0] === date;\n      }).length;\n      const dayMeetings = filteredMeetings.filter(m => {\n        const meetingDate = m.createdAt instanceof Date ? m.createdAt : new Date(m.createdAt);\n        return meetingDate.toISOString().split('T')[0] === date;\n      }).length;\n      \n      return {\n        date: new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n        leads: dayLeads,\n        calls: dayCalls,\n        meetings: dayMeetings\n      };\n    });\n\n    return { leadStatusData, callOutcomeData, performanceData };\n  };\n\n  const { leadStatusData, callOutcomeData, performanceData } = getAnalyticsData();\n\n  // Calculate key metrics\n  const totalLeads = filteredLeads.length;\n  const totalCalls = filteredCalls.length;\n  const totalMeetings = filteredMeetings.length;\n  const conversions = filteredLeads.filter(l => l.status === 'converted').length;\n  const conversionRate = totalLeads > 0 ? (conversions / totalLeads) * 100 : 0;\n  const callToMeetingRate = totalCalls > 0 ? (filteredCalls.filter((c: Call) => c.outcome === 'picked-meeting-setup').length / totalCalls) * 100 : 0;\n  const meetingToConversionRate = totalMeetings > 0 ? (conversions / totalMeetings) * 100 : 0;\n\n  const getTitle = () => {\n    switch (currentUser?.role) {\n      case \"admin\": return \"Organization Analytics\";\n      case \"supervisor\": return \"Team Performance Analytics\";\n      case \"call-center\": return \"Call Center Analytics\";\n      case \"field-agent\": return \"Field Agent Analytics\";\n      default: return \"Analytics & Reports\";\n    }\n  };\n\n  const getSubtitle = () => {\n    switch (currentUser?.role) {\n      case \"admin\": return \"Comprehensive organizational performance insights\";\n      case \"supervisor\": return \"Monitor and analyze your team's performance\";\n      case \"call-center\": return \"Track your calling performance and lead conversion\";\n      case \"field-agent\": return \"Monitor your field activities and meeting outcomes\";\n      default: return \"Analyze your sales performance\";\n    }\n  };\n\n  if (isLoading || !currentUser) {\n    return (\n      <Layout title=\"Analytics & Reports\" subtitle=\"Loading...\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg text-muted-foreground\">\n            {!currentUser ? \"Loading user data...\" : \"Loading analytics data...\"}\n          </div>\n          <div className=\"text-sm text-muted-foreground mt-2\">\n            {leadsLoading && \"Loading leads... \"}\n            {callsLoading && \"Loading calls... \"}\n            {meetingsLoading && \"Loading meetings... \"}\n            {usersLoading && \"Loading users... \"}\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout title={getTitle()} subtitle={getSubtitle()}>\n      <div data-testid=\"analytics-content\" className=\"space-y-6\">\n        {/* Period Selector */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">Performance Dashboard</h2>\n            <p className=\"text-muted-foreground\">Real-time insights and analytics</p>\n          </div>\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue placeholder=\"Period\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7d\">Last 7 days</SelectItem>\n              <SelectItem value=\"30d\">Last 30 days</SelectItem>\n              <SelectItem value=\"90d\">Last 90 days</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Key Metrics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Leads</p>\n                  <p className=\"text-3xl font-bold\">{totalLeads}</p>\n                  <p className=\"text-xs text-green-600 mt-1\">+{Math.floor(totalLeads * 0.12)} this week</p>\n                </div>\n                <Users className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Conversion Rate</p>\n                  <p className=\"text-3xl font-bold\">{conversionRate.toFixed(1)}%</p>\n                  <Progress value={conversionRate} className=\"mt-2\" />\n                </div>\n                <Target className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Calls</p>\n                  <p className=\"text-3xl font-bold\">{totalCalls}</p>\n                  <p className=\"text-xs text-blue-600 mt-1\">{callToMeetingRate.toFixed(1)}% to meeting</p>\n                </div>\n                <Phone className=\"h-8 w-8 text-purple-600\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Meetings</p>\n                  <p className=\"text-3xl font-bold\">{totalMeetings}</p>\n                  <p className=\"text-xs text-orange-600 mt-1\">{meetingToConversionRate.toFixed(1)}% converted</p>\n                </div>\n                <Calendar className=\"h-8 w-8 text-orange-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Section */}\n        <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n          <TabsList>\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n            <TabsTrigger value=\"conversion\">Conversion Funnel</TabsTrigger>\n            {(currentUser.role === 'admin' || currentUser.role === 'supervisor') && (\n              <TabsTrigger value=\"team\">Team Analytics</TabsTrigger>\n            )}\n          </TabsList>\n          \n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Lead Status Distribution */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Lead Status Distribution</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={leadStatusData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        label={({ name, value }) => `${name}: ${value}`}\n                      >\n                        {leadStatusData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n              \n              {/* Call Outcomes */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Call Outcomes</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={callOutcomeData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" height={80} />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"value\" fill=\"#8884d8\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"performance\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Daily Activity Trends</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <AreaChart data={performanceData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area type=\"monotone\" dataKey=\"leads\" stackId=\"1\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                    <Area type=\"monotone\" dataKey=\"calls\" stackId=\"1\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\n                    <Area type=\"monotone\" dataKey=\"meetings\" stackId=\"1\" stroke=\"#ffc658\" fill=\"#ffc658\" />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          <TabsContent value=\"conversion\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-4\">\n              <Card className=\"text-center\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{totalLeads}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Leads</div>\n                  <div className=\"mt-2 text-xs\">100%</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {filteredLeads.filter(l => ['contacted', 'interested', 'meeting', 'converted'].includes(l.status)).length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Contacted</div>\n                  <div className=\"mt-2 text-xs\">\n                    {totalLeads > 0 ? ((filteredLeads.filter(l => ['contacted', 'interested', 'meeting', 'converted'].includes(l.status)).length / totalLeads) * 100).toFixed(1) : 0}%\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-2xl font-bold text-orange-600\">{totalMeetings}</div>\n                  <div className=\"text-sm text-muted-foreground\">Meetings</div>\n                  <div className=\"mt-2 text-xs\">\n                    {totalLeads > 0 ? ((totalMeetings / totalLeads) * 100).toFixed(1) : 0}%\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-2xl font-bold text-purple-600\">{conversions}</div>\n                  <div className=\"text-sm text-muted-foreground\">Conversions</div>\n                  <div className=\"mt-2 text-xs\">{conversionRate.toFixed(1)}%</div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n          \n          {(currentUser.role === 'admin' || currentUser.role === 'supervisor') && (\n            <TabsContent value=\"team\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Team Performance</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {filteredUsers.map((user) => {\n                      const userLeads = filteredLeads.filter(l => l.assignedToId === user.id);\n                      const userCalls = filteredCalls.filter(c => c.agentId === user.id);\n                      const userMeetings = filteredMeetings.filter(m => m.agentId === user.id);\n                      const userConversions = userLeads.filter(l => l.status === 'converted').length;\n                      \n                      return (\n                        <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                              <span className=\"text-sm font-medium text-primary-foreground\">\n                                {user.name.split(' ').map(n => n[0]).join('')}\n                              </span>\n                            </div>\n                            <div>\n                              <div className=\"font-medium\">{user.name}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                <Badge variant=\"outline\">{user.role}</Badge>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-4 gap-4 text-center\">\n                            <div>\n                              <div className=\"text-lg font-bold\">{userLeads.length}</div>\n                              <div className=\"text-xs text-muted-foreground\">Leads</div>\n                            </div>\n                            <div>\n                              <div className=\"text-lg font-bold\">{userCalls.length}</div>\n                              <div className=\"text-xs text-muted-foreground\">Calls</div>\n                            </div>\n                            <div>\n                              <div className=\"text-lg font-bold\">{userMeetings.length}</div>\n                              <div className=\"text-xs text-muted-foreground\">Meetings</div>\n                            </div>\n                            <div>\n                              <div className=\"text-lg font-bold\">{userConversions}</div>\n                              <div className=\"text-xs text-muted-foreground\">Conversions</div>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":22829},"client/src/pages/Calls.tsx":{"content":"import React from \"react\";\nimport { Layout } from \"../components/layout/Layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Calls() {\n  return (\n    <Layout \n      title=\"Call Management\"\n      subtitle=\"Track and manage your call activities\"\n      quickActionLabel=\"Log Call\"\n    >\n      <div data-testid=\"calls-content\">\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <h3 className=\"text-lg font-semibold mb-2\">Call Management</h3>\n            <p className=\"text-muted-foreground\">\n              Call management functionality is coming soon. You'll be able to log calls, track outcomes, and schedule callbacks.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":777},"client/src/pages/Commissions.tsx":{"content":"import React from \"react\";\nimport { Layout } from \"../components/layout/Layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Commissions() {\n  return (\n    <Layout \n      title=\"Commissions & Rewards\"\n      subtitle=\"Track your earnings and rewards\"\n    >\n      <div data-testid=\"commissions-content\">\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <h3 className=\"text-lg font-semibold mb-2\">Commission Tracking</h3>\n            <p className=\"text-muted-foreground\">\n              Commission tracking functionality is coming soon. You'll be able to view your earned commissions, pending payouts, and reward history.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":779},"client/src/pages/Dashboard.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Layout } from \"../components/layout/Layout\";\nimport { MetricsGrid } from \"../components/dashboard/MetricsGrid\";\nimport { ConversionFunnel } from \"../components/dashboard/ConversionFunnel\";\nimport { Leaderboard } from \"../components/dashboard/Leaderboard\";\nimport { RecentActivity } from \"../components/dashboard/RecentActivity\";\nimport { QuickActions } from \"../components/dashboard/QuickActions\";\nimport { ChatWidget } from \"../components/chat/ChatWidget\";\nimport { LeadModal } from \"../components/leads/LeadModal\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { useLeads } from \"../hooks/useFirestore\";\nimport { getUsersByOrganization } from \"../lib/firestore\";\nimport { useToast } from \"../hooks/use-toast\";\nimport type { \n  DashboardMetrics, \n  ConversionFunnelData, \n  TopPerformer, \n  RecentActivityItem,\n  User,\n  Lead \n} from \"../types\";\n\nexport default function Dashboard() {\n  const { currentUser } = useAuth();\n  const { leads, loading: leadsLoading } = useLeads(currentUser?.organizationId || \"\");\n  const [metrics, setMetrics] = useState<DashboardMetrics>({\n    totalLeads: 0,\n    conversionRate: 0,\n    activeAgents: 0,\n    revenue: 0\n  });\n  const [funnelData, setFunnelData] = useState<ConversionFunnelData>({\n    leads: 0,\n    contacted: 0,\n    meetings: 0,\n    conversions: 0\n  });\n  const [topPerformers, setTopPerformers] = useState<TopPerformer[]>([]);\n  const [recentActivity, setRecentActivity] = useState<RecentActivityItem[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  \n  // LeadModal state\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedLead, setSelectedLead] = useState<Lead | undefined>();\n  const [modalMode, setModalMode] = useState<\"create\" | \"edit\" | \"view\">(\"create\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      if (currentUser?.organizationId) {\n        try {\n          const orgUsers = await getUsersByOrganization(currentUser.organizationId);\n          setUsers(orgUsers);\n        } catch (error) {\n          console.error(\"Error fetching users:\", error);\n        }\n      }\n    };\n\n    fetchUsers();\n  }, [currentUser?.organizationId]);\n\n  useEffect(() => {\n    if (!leadsLoading && leads.length > 0) {\n      // Calculate metrics\n      const totalLeads = leads.length;\n      const contactedLeads = leads.filter(lead => \n        [\"contacted\", \"interested\", \"meeting\", \"converted\"].includes(lead.status)\n      ).length;\n      const convertedLeads = leads.filter(lead => lead.status === \"converted\").length;\n      const conversionRate = totalLeads > 0 ? (convertedLeads / totalLeads) * 100 : 0;\n      const activeAgents = users.filter(user => user.isActive).length;\n      \n      setMetrics({\n        totalLeads,\n        conversionRate,\n        activeAgents,\n        revenue: convertedLeads * 5000 // Estimated revenue per conversion\n      });\n\n      // Calculate funnel data\n      const meetingLeads = leads.filter(lead => \n        [\"meeting\", \"converted\"].includes(lead.status)\n      ).length;\n\n      setFunnelData({\n        leads: totalLeads,\n        contacted: contactedLeads,\n        meetings: meetingLeads,\n        conversions: convertedLeads\n      });\n\n      // Generate sample top performers (in a real app, this would come from aggregated data)\n      const performers: TopPerformer[] = users\n        .filter(user => [\"call-center\", \"field-agent\", \"supervisor\"].includes(user.role))\n        .slice(0, 3)\n        .map((user, index) => ({\n          id: user.id,\n          name: user.name,\n          role: user.role,\n          conversions: Math.floor(Math.random() * 50) + 20,\n          growth: Math.floor(Math.random() * 30) + 5\n        }));\n\n      setTopPerformers(performers);\n\n      // Generate sample recent activity\n      const activities: RecentActivityItem[] = leads\n        .slice(0, 5)\n        .map((lead, index) => ({\n          id: `activity-${index}`,\n          type: [\"call\", \"meeting\", \"conversion\"][Math.floor(Math.random() * 3)] as any,\n          agentName: users[Math.floor(Math.random() * users.length)]?.name || \"Unknown Agent\",\n          leadName: lead.name,\n          action: \"contacted\",\n          timestamp: new Date(Date.now() - Math.random() * 86400000) // Random time in last 24h\n        }));\n\n      setRecentActivity(activities);\n    }\n  }, [leads, leadsLoading, users]);\n\n  const getDashboardTitle = () => {\n    if (!currentUser) return \"Dashboard\";\n    \n    switch (currentUser.role) {\n      case \"admin\":\n        return \"Admin Dashboard\";\n      case \"supervisor\":\n        return \"Supervisor Dashboard\";\n      case \"call-center\":\n        return \"Call Center Dashboard\";\n      case \"field-agent\":\n        return \"Field Agent Dashboard\";\n      default:\n        return \"Dashboard\";\n    }\n  };\n\n  const getDashboardSubtitle = () => {\n    if (!currentUser) return \"\";\n    \n    switch (currentUser.role) {\n      case \"admin\":\n        return \"Manage your sales organization\";\n      case \"supervisor\":\n        return \"Monitor team performance and approve leads\";\n      case \"call-center\":\n        return \"Manage assigned leads and schedule meetings\";\n      case \"field-agent\":\n        return \"View meetings and manage field visits\";\n      default:\n        return \"\";\n    }\n  };\n\n  // Quick Action handlers\n  const handleAddLead = () => {\n    setSelectedLead(undefined);\n    setModalMode(\"create\");\n    setModalOpen(true);\n  };\n\n  const handleImportLeads = () => {\n    // TODO: Implement lead import functionality\n    toast({\n      title: \"Coming Soon\",\n      description: \"Lead import functionality will be available soon.\",\n    });\n  };\n\n  const handleAddTeamMember = () => {\n    // TODO: Implement add team member functionality\n    toast({\n      title: \"Coming Soon\",\n      description: \"Add team member functionality will be available soon.\",\n    });\n  };\n\n  const handleConfigureTargets = () => {\n    // TODO: Implement configure targets functionality\n    toast({\n      title: \"Coming Soon\",\n      description: \"Configure targets functionality will be available soon.\",\n    });\n  };\n\n  if (!currentUser) return null;\n\n  return (\n    <>\n      <Layout \n        title={getDashboardTitle()}\n        subtitle={getDashboardSubtitle()}\n        quickActionLabel=\"Add Lead\"\n      >\n        <div data-testid=\"dashboard-content\">\n          <MetricsGrid metrics={metrics} />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n            <ConversionFunnel data={funnelData} />\n            <Leaderboard performers={topPerformers} />\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <RecentActivity activities={recentActivity} />\n            <QuickActions \n              onAddLead={handleAddLead}\n              onImportLeads={handleImportLeads}\n              onAddTeamMember={handleAddTeamMember}\n              onConfigureTargets={handleConfigureTargets}\n            />\n          </div>\n        </div>\n      </Layout>\n      <ChatWidget />\n      <LeadModal \n        isOpen={modalOpen}\n        onClose={() => setModalOpen(false)}\n        agents={users.filter(user => [\"call-center\", \"field-agent\", \"supervisor\"].includes(user.role))}\n        mode={modalMode}\n        lead={selectedLead}\n      />\n    </>\n  );\n}\n","size_bytes":7292},"client/src/pages/Leads.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Layout } from \"../components/layout/Layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { useLeads } from \"../hooks/useFirestore\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Search, Filter, Plus, Eye, Edit, Trash2 } from \"lucide-react\";\nimport { LeadModal } from \"../components/leads/LeadModal\";\nimport { deleteLead, getUsersByOrganization } from \"../lib/firestore\";\nimport { useToast } from \"../hooks/use-toast\";\nimport type { Lead, LeadStatus, User } from \"../types\";\n\nexport default function Leads() {\n  const { currentUser } = useAuth();\n  const { leads, loading } = useLeads(currentUser?.organizationId || \"\");\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<LeadStatus | \"all\">(\"all\");\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalMode, setModalMode] = useState<\"create\" | \"edit\" | \"view\">(\"create\");\n  const [selectedLead, setSelectedLead] = useState<Lead | undefined>();\n  const [agents, setAgents] = useState<User[]>([]);\n  const [deleteLoading, setDeleteLoading] = useState<string | null>(null);\n\n  // Fetch agents for assignment dropdown\n  useEffect(() => {\n    const fetchAgents = async () => {\n      if (!currentUser?.organizationId) return;\n      try {\n        const orgUsers = await getUsersByOrganization(currentUser.organizationId);\n        setAgents(orgUsers);\n      } catch (error) {\n        console.error(\"Error fetching agents:\", error);\n      }\n    };\n    fetchAgents();\n  }, [currentUser?.organizationId]);\n\n  // Modal handlers\n  const handleCreateLead = () => {\n    setSelectedLead(undefined);\n    setModalMode(\"create\");\n    setModalOpen(true);\n  };\n\n  const handleViewLead = (lead: Lead) => {\n    setSelectedLead(lead);\n    setModalMode(\"view\");\n    setModalOpen(true);\n  };\n\n  const handleEditLead = (lead: Lead) => {\n    setSelectedLead(lead);\n    setModalMode(\"edit\");\n    setModalOpen(true);\n  };\n\n  const handleDeleteLead = async (leadId: string) => {\n    setDeleteLoading(leadId);\n    try {\n      await deleteLead(leadId);\n      toast({\n        title: \"Success\",\n        description: \"Lead deleted successfully\"\n      });\n    } catch (error: any) {\n      console.error(\"Error deleting lead:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete lead\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setDeleteLoading(null);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setSelectedLead(undefined);\n  };\n\n  const getStatusColor = (status: LeadStatus) => {\n    switch (status) {\n      case \"new\": return \"bg-blue-100 text-blue-800\";\n      case \"contacted\": return \"bg-yellow-100 text-yellow-800\";\n      case \"interested\": return \"bg-green-100 text-green-800\";\n      case \"meeting\": return \"bg-purple-100 text-purple-800\";\n      case \"converted\": return \"bg-emerald-100 text-emerald-800\";\n      case \"closed\": return \"bg-gray-100 text-gray-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const filteredLeads = leads.filter(lead => {\n    const matchesSearch = lead.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         lead.company?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         lead.email?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || lead.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  if (!currentUser) return null;\n\n  return (\n    <Layout \n      title=\"Leads Management\"\n      subtitle=\"Track and manage your sales leads\"\n      quickActionLabel=\"Add Lead\"\n      onQuickAction={handleCreateLead}\n    >\n      <div data-testid=\"leads-content\">\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search leads by name, company, or email...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-leads\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Select value={statusFilter} onValueChange={(value: LeadStatus | \"all\") => setStatusFilter(value)}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"new\">New</SelectItem>\n                    <SelectItem value=\"contacted\">Contacted</SelectItem>\n                    <SelectItem value=\"interested\">Interested</SelectItem>\n                    <SelectItem value=\"meeting\">Meeting</SelectItem>\n                    <SelectItem value=\"converted\">Converted</SelectItem>\n                    <SelectItem value=\"closed\">Closed</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  Filter\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Leads List */}\n        <Card>\n          <CardContent className=\"p-0\">\n            {loading ? (\n              <div className=\"p-8 text-center text-muted-foreground\" data-testid=\"leads-loading\">\n                Loading leads...\n              </div>\n            ) : filteredLeads.length === 0 ? (\n              <div className=\"p-8 text-center\" data-testid=\"leads-empty\">\n                <div className=\"text-muted-foreground mb-4\">\n                  {leads.length === 0 ? \"No leads found\" : \"No leads match your search criteria\"}\n                </div>\n                <Button onClick={handleCreateLead} data-testid=\"button-add-first-lead\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Your First Lead\n                </Button>\n              </div>\n            ) : (\n              <div className=\"divide-y divide-border\">\n                {filteredLeads.map((lead, index) => (\n                  <div \n                    key={lead.id} \n                    className=\"p-6 hover:bg-muted/50 transition-colors\"\n                    data-testid={`lead-item-${index}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <h3 className=\"font-semibold text-foreground\" data-testid={`lead-name-${index}`}>\n                            {lead.name}\n                          </h3>\n                          <Badge \n                            className={getStatusColor(lead.status)}\n                            data-testid={`lead-status-${index}`}\n                          >\n                            {lead.status}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"space-y-1 text-sm text-muted-foreground\">\n                          {lead.company && (\n                            <p data-testid={`lead-company-${index}`}>\n                              <span className=\"font-medium\">Company:</span> {lead.company}\n                            </p>\n                          )}\n                          {lead.email && (\n                            <p data-testid={`lead-email-${index}`}>\n                              <span className=\"font-medium\">Email:</span> {lead.email}\n                            </p>\n                          )}\n                          {lead.phone && (\n                            <p data-testid={`lead-phone-${index}`}>\n                              <span className=\"font-medium\">Phone:</span> {lead.phone}\n                            </p>\n                          )}\n                          {lead.estimatedValue && (\n                            <p data-testid={`lead-value-${index}`}>\n                              <span className=\"font-medium\">Est. Value:</span> ${lead.estimatedValue.toLocaleString()}\n                            </p>\n                          )}\n                        </div>\n                        \n                        {lead.notes && (\n                          <p className=\"mt-2 text-sm text-foreground\" data-testid={`lead-notes-${index}`}>\n                            {lead.notes}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex flex-col items-end gap-2\">\n                        <p className=\"text-xs text-muted-foreground\" data-testid={`lead-created-${index}`}>\n                          Created {formatDistanceToNow(lead.createdAt, { addSuffix: true })}\n                        </p>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => handleViewLead(lead)}\n                            data-testid={`button-view-lead-${index}`}\n                          >\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            View\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => handleEditLead(lead)}\n                            data-testid={`button-edit-lead-${index}`}\n                          >\n                            <Edit className=\"w-4 h-4 mr-1\" />\n                            Edit\n                          </Button>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                disabled={deleteLoading === lead.id}\n                                data-testid={`button-delete-lead-${index}`}\n                              >\n                                <Trash2 className=\"w-4 h-4 mr-1\" />\n                                {deleteLoading === lead.id ? \"...\" : \"Delete\"}\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Delete Lead</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to delete {lead.name}? This action cannot be undone.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction onClick={() => handleDeleteLead(lead.id)}>\n                                  Delete\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Lead Modal */}\n      <LeadModal\n        isOpen={modalOpen}\n        onClose={handleCloseModal}\n        lead={selectedLead}\n        agents={agents}\n        mode={modalMode}\n      />\n    </Layout>\n  );\n}\n","size_bytes":12736},"client/src/pages/Meetings.tsx":{"content":"import React from \"react\";\nimport { Layout } from \"../components/layout/Layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Meetings() {\n  return (\n    <Layout \n      title=\"Meeting Schedule\"\n      subtitle=\"Manage your meetings and field visits\"\n      quickActionLabel=\"Schedule Meeting\"\n    >\n      <div data-testid=\"meetings-content\">\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <h3 className=\"text-lg font-semibold mb-2\">Meeting Management</h3>\n            <p className=\"text-muted-foreground\">\n              Meeting management functionality is coming soon. You'll be able to schedule meetings, track field visits, and log meeting outcomes.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":812},"client/src/pages/Settings.tsx":{"content":"import React, { useState } from \"react\";\nimport { Layout } from \"../components/layout/Layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { useToast } from \"../hooks/use-toast\";\nimport { createLead, getLeadsByOrganization } from \"../lib/firestore\";\nimport { parseExcelFile, createSampleExcelFile } from \"../lib/excel-import\";\nimport { ImportResultsModal } from \"../components/settings/ImportResultsModal\";\nimport type { ImportResult } from \"../lib/excel-import\";\nimport { \n  Settings as SettingsIcon, \n  Users, \n  Target, \n  DollarSign, \n  Bell, \n  Upload, \n  Download,\n  MessageSquare,\n  Shield,\n  Globe,\n  Database,\n  Zap\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const { currentUser } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [importResult, setImportResult] = useState<ImportResult | null>(null);\n  const [showImportModal, setShowImportModal] = useState(false);\n  const [importLoading, setImportLoading] = useState(false);\n\n  // Organization Settings\n  const [orgSettings, setOrgSettings] = useState({\n    companyName: \"Acme Sales Corp\",\n    timezone: \"UTC-05:00\",\n    currency: \"USD\",\n    workingHours: \"9:00-17:00\",\n    defaultLeadStatus: \"new\" as const,\n    autoAssignLeads: true,\n    enableNotifications: true,\n    allowSelfRegistration: false\n  });\n\n  // Target Settings\n  const [targetSettings, setTargetSettings] = useState({\n    monthlyLeadTarget: 100,\n    monthlyConversionTarget: 25,\n    monthlyRevenueTarget: 50000,\n    targetResetDay: 1,\n    enableTargetNotifications: true\n  });\n\n  // Commission Settings\n  const [commissionSettings, setCommissionSettings] = useState({\n    meetingCommission: 50,\n    conversionCommission: 200,\n    purchaseCommissionRate: 5, // percentage\n    bonusThreshold: 10,\n    bonusAmount: 500,\n    autoApproveCommissions: false\n  });\n\n  // Notification Settings\n  const [notificationSettings, setNotificationSettings] = useState({\n    emailNotifications: true,\n    smsNotifications: false,\n    pushNotifications: true,\n    dailyReports: true,\n    weeklyReports: true,\n    monthlyReports: true,\n    newLeadAlerts: true,\n    meetingReminders: true,\n    targetAlerts: true\n  });\n\n  // Chat Settings\n  const [chatSettings, setChatSettings] = useState({\n    enableChat: true,\n    rocketChatServer: \"https://your-server.rocket.chat\",\n    enableFileSharing: true,\n    maxFileSize: 10, // MB\n    retentionPeriod: 90, // days\n    enablePushNotifications: true\n  });\n\n  // System Settings\n  const [systemSettings, setSystemSettings] = useState({\n    enableDataExport: true,\n    enableBulkImport: true,\n    sessionTimeout: 8, // hours\n    enableAuditLog: true,\n    backupFrequency: \"daily\" as const,\n    enableMaintenance: false\n  });\n\n  const handleSaveSettings = async (section: string) => {\n    setLoading(true);\n    try {\n      // TODO: Implement actual save functionality\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      toast({\n        title: \"Settings Saved\",\n        description: `${section} settings have been updated successfully.`\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save settings. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleLeadImport = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.xlsx,.xls,.csv';\n    input.onchange = async (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (file && currentUser?.organizationId) {\n        setLoading(true);\n        try {\n          toast({\n            title: \"Processing File\",\n            description: `Parsing ${file.name} and checking for duplicates...`,\n          });\n          \n          // Fetch existing leads for duplicate detection\n          const existingLeads = await getLeadsByOrganization(currentUser.organizationId);\n          const result = await parseExcelFile(file, currentUser.organizationId, existingLeads);\n          setImportResult(result);\n          setShowImportModal(true);\n        } catch (error) {\n          toast({\n            title: \"Import Error\",\n            description: \"Failed to parse Excel file. Please check the format.\",\n            variant: \"destructive\"\n          });\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n    input.click();\n  };\n\n  const handleDownloadTemplate = () => {\n    try {\n      createSampleExcelFile();\n      toast({\n        title: \"Template Downloaded\",\n        description: \"Sample Excel template has been downloaded to your computer.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Download Error\",\n        description: \"Failed to download template. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleConfirmImport = async () => {\n    if (!importResult || !currentUser?.organizationId) return;\n\n    setImportLoading(true);\n    try {\n      let successCount = 0;\n      let errorCount = 0;\n\n      for (const leadData of importResult.validLeads) {\n        try {\n          await createLead(leadData);\n          successCount++;\n        } catch (error) {\n          errorCount++;\n          console.error('Error creating lead:', error);\n        }\n      }\n\n      toast({\n        title: \"Import Complete\",\n        description: `Successfully imported ${successCount} leads. ${errorCount > 0 ? `${errorCount} failed.` : ''}`,\n        variant: errorCount > 0 ? \"destructive\" : \"default\"\n      });\n\n      setShowImportModal(false);\n      setImportResult(null);\n    } catch (error) {\n      toast({\n        title: \"Import Failed\",\n        description: \"Failed to import leads. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setImportLoading(false);\n    }\n  };\n\n  if (!currentUser || currentUser.role !== \"admin\") {\n    return (\n      <Layout title=\"Settings\" subtitle=\"Access Denied\">\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Shield className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Admin Access Required</h3>\n            <p className=\"text-muted-foreground\">\n              You need administrator privileges to access system settings.\n            </p>\n          </CardContent>\n        </Card>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout \n      title=\"System Settings\"\n      subtitle=\"Configure all aspects of your sales management system\"\n    >\n      <div data-testid=\"settings-content\" className=\"space-y-6\">\n        <Tabs defaultValue=\"organization\" className=\"w-full\">\n          <TabsList className=\"grid grid-cols-6 w-full mb-6\">\n            <TabsTrigger value=\"organization\" className=\"flex items-center gap-2\">\n              <Globe className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Organization</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"users\" className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Users</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"targets\" className=\"flex items-center gap-2\">\n              <Target className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Targets</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"commissions\" className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Commissions</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"chat\" className=\"flex items-center gap-2\">\n              <MessageSquare className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Chat</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"system\" className=\"flex items-center gap-2\">\n              <Database className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">System</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Organization Settings */}\n          <TabsContent value=\"organization\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Globe className=\"h-5 w-5\" />\n                  Organization Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"companyName\">Company Name</Label>\n                    <Input\n                      id=\"companyName\"\n                      value={orgSettings.companyName}\n                      onChange={(e) => setOrgSettings({...orgSettings, companyName: e.target.value})}\n                      data-testid=\"input-company-name\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"timezone\">Timezone</Label>\n                    <Select value={orgSettings.timezone} onValueChange={(value) => setOrgSettings({...orgSettings, timezone: value})}>\n                      <SelectTrigger data-testid=\"select-timezone\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"UTC-05:00\">EST (UTC-5)</SelectItem>\n                        <SelectItem value=\"UTC-06:00\">CST (UTC-6)</SelectItem>\n                        <SelectItem value=\"UTC-07:00\">MST (UTC-7)</SelectItem>\n                        <SelectItem value=\"UTC-08:00\">PST (UTC-8)</SelectItem>\n                        <SelectItem value=\"UTC+00:00\">UTC (UTC+0)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currency\">Currency</Label>\n                    <Select value={orgSettings.currency} onValueChange={(value) => setOrgSettings({...orgSettings, currency: value})}>\n                      <SelectTrigger data-testid=\"select-currency\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"USD\">USD ($)</SelectItem>\n                        <SelectItem value=\"EUR\">EUR (€)</SelectItem>\n                        <SelectItem value=\"GBP\">GBP (£)</SelectItem>\n                        <SelectItem value=\"JPY\">JPY (¥)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"workingHours\">Working Hours</Label>\n                    <Input\n                      id=\"workingHours\"\n                      value={orgSettings.workingHours}\n                      onChange={(e) => setOrgSettings({...orgSettings, workingHours: e.target.value})}\n                      placeholder=\"9:00-17:00\"\n                      data-testid=\"input-working-hours\"\n                    />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Lead Management</h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label>Default Lead Status</Label>\n                      <Select value={orgSettings.defaultLeadStatus} onValueChange={(value: any) => setOrgSettings({...orgSettings, defaultLeadStatus: value})}>\n                        <SelectTrigger data-testid=\"select-default-lead-status\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"new\">New</SelectItem>\n                          <SelectItem value=\"contacted\">Contacted</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"flex items-center justify-between space-y-2\">\n                      <Label htmlFor=\"autoAssign\">Auto-assign Leads</Label>\n                      <Switch\n                        id=\"autoAssign\"\n                        checked={orgSettings.autoAssignLeads}\n                        onCheckedChange={(checked) => setOrgSettings({...orgSettings, autoAssignLeads: checked})}\n                        data-testid=\"switch-auto-assign\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Data Management</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex flex-wrap gap-3\">\n                      <Button \n                        onClick={handleLeadImport} \n                        className=\"flex items-center gap-2\"\n                        disabled={loading}\n                        data-testid=\"button-import-leads\"\n                      >\n                        <Upload className=\"h-4 w-4\" />\n                        {loading ? \"Processing...\" : \"Import Leads from Excel\"}\n                      </Button>\n                      <Button \n                        onClick={handleDownloadTemplate}\n                        variant=\"outline\" \n                        className=\"flex items-center gap-2\"\n                        data-testid=\"button-download-template\"\n                      >\n                        <Download className=\"h-4 w-4\" />\n                        Download Template\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        className=\"flex items-center gap-2\"\n                        data-testid=\"button-export-leads\"\n                      >\n                        <Download className=\"h-4 w-4\" />\n                        Export All Data\n                      </Button>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      <p>• Supported formats: Excel (.xlsx, .xls) and CSV (.csv)</p>\n                      <p>• Required column: Name</p>\n                      <p>• Optional columns: Email, Phone, Company, Estimated Value, Status, Source, Notes</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button \n                    onClick={() => handleSaveSettings('Organization')}\n                    disabled={loading}\n                    data-testid=\"button-save-organization\"\n                  >\n                    {loading ? \"Saving...\" : \"Save Changes\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Target Settings */}\n          <TabsContent value=\"targets\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"h-5 w-5\" />\n                  Target & Goal Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"leadTarget\">Monthly Lead Target</Label>\n                    <Input\n                      id=\"leadTarget\"\n                      type=\"number\"\n                      value={targetSettings.monthlyLeadTarget}\n                      onChange={(e) => setTargetSettings({...targetSettings, monthlyLeadTarget: parseInt(e.target.value) || 0})}\n                      data-testid=\"input-lead-target\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"conversionTarget\">Monthly Conversion Target</Label>\n                    <Input\n                      id=\"conversionTarget\"\n                      type=\"number\"\n                      value={targetSettings.monthlyConversionTarget}\n                      onChange={(e) => setTargetSettings({...targetSettings, monthlyConversionTarget: parseInt(e.target.value) || 0})}\n                      data-testid=\"input-conversion-target\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"revenueTarget\">Monthly Revenue Target ($)</Label>\n                    <Input\n                      id=\"revenueTarget\"\n                      type=\"number\"\n                      value={targetSettings.monthlyRevenueTarget}\n                      onChange={(e) => setTargetSettings({...targetSettings, monthlyRevenueTarget: parseInt(e.target.value) || 0})}\n                      data-testid=\"input-revenue-target\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"resetDay\">Target Reset Day</Label>\n                    <Input\n                      id=\"resetDay\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"31\"\n                      value={targetSettings.targetResetDay}\n                      onChange={(e) => setTargetSettings({...targetSettings, targetResetDay: parseInt(e.target.value) || 1})}\n                      data-testid=\"input-reset-day\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"targetNotifications\">Enable Target Notifications</Label>\n                  <Switch\n                    id=\"targetNotifications\"\n                    checked={targetSettings.enableTargetNotifications}\n                    onCheckedChange={(checked) => setTargetSettings({...targetSettings, enableTargetNotifications: checked})}\n                    data-testid=\"switch-target-notifications\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button \n                    onClick={() => handleSaveSettings('Targets')}\n                    disabled={loading}\n                    data-testid=\"button-save-targets\"\n                  >\n                    {loading ? \"Saving...\" : \"Save Changes\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Commission Settings */}\n          <TabsContent value=\"commissions\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5\" />\n                  Commission & Reward Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"meetingCommission\">Meeting Commission ($)</Label>\n                    <Input\n                      id=\"meetingCommission\"\n                      type=\"number\"\n                      value={commissionSettings.meetingCommission}\n                      onChange={(e) => setCommissionSettings({...commissionSettings, meetingCommission: parseInt(e.target.value) || 0})}\n                      data-testid=\"input-meeting-commission\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"conversionCommission\">Conversion Commission ($)</Label>\n                    <Input\n                      id=\"conversionCommission\"\n                      type=\"number\"\n                      value={commissionSettings.conversionCommission}\n                      onChange={(e) => setCommissionSettings({...commissionSettings, conversionCommission: parseInt(e.target.value) || 0})}\n                      data-testid=\"input-conversion-commission\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"purchaseRate\">Purchase Commission Rate (%)</Label>\n                    <Input\n                      id=\"purchaseRate\"\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"100\"\n                      step=\"0.1\"\n                      value={commissionSettings.purchaseCommissionRate}\n                      onChange={(e) => setCommissionSettings({...commissionSettings, purchaseCommissionRate: parseFloat(e.target.value) || 0})}\n                      data-testid=\"input-purchase-rate\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"bonusThreshold\">Bonus Threshold (conversions)</Label>\n                    <Input\n                      id=\"bonusThreshold\"\n                      type=\"number\"\n                      value={commissionSettings.bonusThreshold}\n                      onChange={(e) => setCommissionSettings({...commissionSettings, bonusThreshold: parseInt(e.target.value) || 0})}\n                      data-testid=\"input-bonus-threshold\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"bonusAmount\">Bonus Amount ($)</Label>\n                    <Input\n                      id=\"bonusAmount\"\n                      type=\"number\"\n                      value={commissionSettings.bonusAmount}\n                      onChange={(e) => setCommissionSettings({...commissionSettings, bonusAmount: parseInt(e.target.value) || 0})}\n                      data-testid=\"input-bonus-amount\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"autoApprove\">Auto-approve Commissions</Label>\n                  <Switch\n                    id=\"autoApprove\"\n                    checked={commissionSettings.autoApproveCommissions}\n                    onCheckedChange={(checked) => setCommissionSettings({...commissionSettings, autoApproveCommissions: checked})}\n                    data-testid=\"switch-auto-approve\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button \n                    onClick={() => handleSaveSettings('Commissions')}\n                    disabled={loading}\n                    data-testid=\"button-save-commissions\"\n                  >\n                    {loading ? \"Saving...\" : \"Save Changes\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Chat Settings */}\n          <TabsContent value=\"chat\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageSquare className=\"h-5 w-5\" />\n                  Rocket.Chat Integration Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label htmlFor=\"enableChat\">Enable Rocket.Chat</Label>\n                      <p className=\"text-sm text-muted-foreground\">Replace current chat system with Rocket.Chat</p>\n                    </div>\n                    <Switch\n                      id=\"enableChat\"\n                      checked={chatSettings.enableChat}\n                      onCheckedChange={(checked) => setChatSettings({...chatSettings, enableChat: checked})}\n                      data-testid=\"switch-enable-chat\"\n                    />\n                  </div>\n\n                  {chatSettings.enableChat && (\n                    <>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"chatServer\">Rocket.Chat Server URL</Label>\n                        <Input\n                          id=\"chatServer\"\n                          value={chatSettings.rocketChatServer}\n                          onChange={(e) => setChatSettings({...chatSettings, rocketChatServer: e.target.value})}\n                          placeholder=\"https://your-server.rocket.chat\"\n                          data-testid=\"input-chat-server\"\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"maxFileSize\">Max File Size (MB)</Label>\n                          <Input\n                            id=\"maxFileSize\"\n                            type=\"number\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={chatSettings.maxFileSize}\n                            onChange={(e) => setChatSettings({...chatSettings, maxFileSize: parseInt(e.target.value) || 10})}\n                            data-testid=\"input-max-file-size\"\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"retention\">Message Retention (days)</Label>\n                          <Input\n                            id=\"retention\"\n                            type=\"number\"\n                            min=\"1\"\n                            max=\"365\"\n                            value={chatSettings.retentionPeriod}\n                            onChange={(e) => setChatSettings({...chatSettings, retentionPeriod: parseInt(e.target.value) || 90})}\n                            data-testid=\"input-retention\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"fileSharing\">Enable File Sharing</Label>\n                        <Switch\n                          id=\"fileSharing\"\n                          checked={chatSettings.enableFileSharing}\n                          onCheckedChange={(checked) => setChatSettings({...chatSettings, enableFileSharing: checked})}\n                          data-testid=\"switch-file-sharing\"\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"chatPushNotifications\">Enable Push Notifications</Label>\n                        <Switch\n                          id=\"chatPushNotifications\"\n                          checked={chatSettings.enablePushNotifications}\n                          onCheckedChange={(checked) => setChatSettings({...chatSettings, enablePushNotifications: checked})}\n                          data-testid=\"switch-chat-push\"\n                        />\n                      </div>\n                    </>\n                  )}\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button \n                    onClick={() => handleSaveSettings('Chat')}\n                    disabled={loading}\n                    data-testid=\"button-save-chat\"\n                  >\n                    {loading ? \"Saving...\" : \"Save Changes\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* System Settings */}\n          <TabsContent value=\"system\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Database className=\"h-5 w-5\" />\n                  System & Security Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"dataExport\">Enable Data Export</Label>\n                    <Switch\n                      id=\"dataExport\"\n                      checked={systemSettings.enableDataExport}\n                      onCheckedChange={(checked) => setSystemSettings({...systemSettings, enableDataExport: checked})}\n                      data-testid=\"switch-data-export\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"bulkImport\">Enable Bulk Import</Label>\n                    <Switch\n                      id=\"bulkImport\"\n                      checked={systemSettings.enableBulkImport}\n                      onCheckedChange={(checked) => setSystemSettings({...systemSettings, enableBulkImport: checked})}\n                      data-testid=\"switch-bulk-import\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"sessionTimeout\">Session Timeout (hours)</Label>\n                    <Input\n                      id=\"sessionTimeout\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"24\"\n                      value={systemSettings.sessionTimeout}\n                      onChange={(e) => setSystemSettings({...systemSettings, sessionTimeout: parseInt(e.target.value) || 8})}\n                      data-testid=\"input-session-timeout\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"auditLog\">Enable Audit Logging</Label>\n                    <Switch\n                      id=\"auditLog\"\n                      checked={systemSettings.enableAuditLog}\n                      onCheckedChange={(checked) => setSystemSettings({...systemSettings, enableAuditLog: checked})}\n                      data-testid=\"switch-audit-log\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Backup Frequency</Label>\n                    <Select value={systemSettings.backupFrequency} onValueChange={(value: any) => setSystemSettings({...systemSettings, backupFrequency: value})}>\n                      <SelectTrigger data-testid=\"select-backup-frequency\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"hourly\">Hourly</SelectItem>\n                        <SelectItem value=\"daily\">Daily</SelectItem>\n                        <SelectItem value=\"weekly\">Weekly</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label htmlFor=\"maintenance\">Maintenance Mode</Label>\n                      <p className=\"text-sm text-muted-foreground\">Prevent non-admin users from accessing the system</p>\n                    </div>\n                    <Switch\n                      id=\"maintenance\"\n                      checked={systemSettings.enableMaintenance}\n                      onCheckedChange={(checked) => setSystemSettings({...systemSettings, enableMaintenance: checked})}\n                      data-testid=\"switch-maintenance\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button \n                    onClick={() => handleSaveSettings('System')}\n                    disabled={loading}\n                    data-testid=\"button-save-system\"\n                  >\n                    {loading ? \"Saving...\" : \"Save Changes\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Users Management Tab */}\n          <TabsContent value=\"users\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  User Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <p className=\"text-muted-foreground\">\n                    Manage user roles, permissions, and access levels\n                  </p>\n                  <Button \n                    className=\"flex items-center gap-2\"\n                    data-testid=\"button-add-user\"\n                  >\n                    <Users className=\"h-4 w-4\" />\n                    Add New User\n                  </Button>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"selfRegistration\">Allow Self Registration</Label>\n                    <Switch\n                      id=\"selfRegistration\"\n                      checked={orgSettings.allowSelfRegistration}\n                      onCheckedChange={(checked) => setOrgSettings({...orgSettings, allowSelfRegistration: checked})}\n                      data-testid=\"switch-self-registration\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <Card className=\"p-4 text-center\">\n                      <Badge variant=\"default\" className=\"mb-2\">Admin</Badge>\n                      <p className=\"text-2xl font-bold\">2</p>\n                      <p className=\"text-sm text-muted-foreground\">Full Access</p>\n                    </Card>\n                    <Card className=\"p-4 text-center\">\n                      <Badge variant=\"secondary\" className=\"mb-2\">Supervisor</Badge>\n                      <p className=\"text-2xl font-bold\">5</p>\n                      <p className=\"text-sm text-muted-foreground\">Team Management</p>\n                    </Card>\n                    <Card className=\"p-4 text-center\">\n                      <Badge variant=\"outline\" className=\"mb-2\">Call Center</Badge>\n                      <p className=\"text-2xl font-bold\">15</p>\n                      <p className=\"text-sm text-muted-foreground\">Lead Management</p>\n                    </Card>\n                    <Card className=\"p-4 text-center\">\n                      <Badge variant=\"outline\" className=\"mb-2\">Field Agent</Badge>\n                      <p className=\"text-2xl font-bold\">8</p>\n                      <p className=\"text-sm text-muted-foreground\">Meeting Management</p>\n                    </Card>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button \n                    onClick={() => handleSaveSettings('Users')}\n                    disabled={loading}\n                    data-testid=\"button-save-users\"\n                  >\n                    {loading ? \"Saving...\" : \"Save Changes\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n      \n      <ImportResultsModal\n        isOpen={showImportModal}\n        onClose={() => {\n          setShowImportModal(false);\n          setImportResult(null);\n        }}\n        result={importResult}\n        onConfirmImport={handleConfirmImport}\n        loading={importLoading}\n      />\n    </Layout>\n  );\n}\n","size_bytes":36286},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export * from '@shared/schema';\n\nexport interface FirebaseConfig {\n  apiKey: string;\n  authDomain: string;\n  projectId: string;\n  storageBucket: string;\n  messagingSenderId: string;\n  appId: string;\n  measurementId?: string;\n}\n\nexport interface AuthUser {\n  uid: string;\n  email: string | null;\n  displayName: string | null;\n  photoURL: string | null;\n}\n\nexport interface AppUser extends AuthUser {\n  role: UserRole;\n  organizationId: string;\n  name: string;\n  supervisorId?: string;\n  isActive: boolean;\n}\n\nexport type UserRole = \"admin\" | \"supervisor\" | \"call-center\" | \"field-agent\";\n\nexport interface Theme {\n  isDark: boolean;\n  toggle: () => void;\n}\n","size_bytes":656},"client/src/components/auth/LoginModal.tsx":{"content":"import React, { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { useToast } from \"../../hooks/use-toast\";\nimport { ChartLine, Users, Settings } from \"lucide-react\";\nimport { createDemoData, DEMO_CREDENTIALS } from \"../../lib/demo-setup\";\n\ninterface LoginModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const LoginModal: React.FC<LoginModalProps> = ({ isOpen, onClose }) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [demoLoading, setDemoLoading] = useState(false);\n  const { signIn } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await signIn(email, password);\n      onClose();\n      toast({\n        title: \"Success\",\n        description: \"You have been signed in successfully.\",\n      });\n    } catch (error: any) {\n      console.error(\"Sign in error:\", error);\n      \n      let errorMessage = \"Failed to sign in\";\n      if (error.message?.includes(\"permission-denied\") || error.code === \"permission-denied\") {\n        errorMessage = \"Firebase security rules need to be configured. Please see setup instructions below.\";\n      } else if (error.message?.includes(\"user-not-found\") || error.code === \"auth/user-not-found\") {\n        errorMessage = \"No account found with this email. Try setting up demo data first.\";\n      } else if (error.message?.includes(\"wrong-password\") || error.code === \"auth/wrong-password\") {\n        errorMessage = \"Incorrect password. Try demo credentials or reset your password.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Sign In Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDemoSetup = async () => {\n    setDemoLoading(true);\n    try {\n      await createDemoData();\n      toast({\n        title: \"Demo Data Created\",\n        description: \"Demo organization and users have been created successfully!\",\n      });\n    } catch (error: any) {\n      console.error(\"Demo setup error:\", error);\n      let errorMessage = \"Failed to create demo data\";\n      if (error.message?.includes(\"permission-denied\")) {\n        errorMessage = \"Firebase security rules need to be configured first. Please follow the setup instructions.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Demo Setup Failed\", \n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setDemoLoading(false);\n    }\n  };\n\n  const handleDemoLogin = async (role: keyof typeof DEMO_CREDENTIALS) => {\n    const credentials = DEMO_CREDENTIALS[role];\n    setEmail(credentials.email);\n    setPassword(credentials.password);\n    \n    // Auto-submit after setting credentials\n    setLoading(true);\n    try {\n      await signIn(credentials.email, credentials.password);\n      onClose();\n      toast({\n        title: \"Success\",\n        description: `Signed in as ${role} user successfully.`,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Demo Login Failed\",\n        description: error.message || \"Failed to sign in with demo credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center\" data-testid=\"login-modal\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-primary rounded-xl flex items-center justify-center mx-auto mb-4\">\n              <ChartLine className=\"text-2xl text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Sales Management System</h1>\n            <p className=\"text-muted-foreground mt-2\">Sign in to your account</p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"login-form\">\n            <div>\n              <Label htmlFor=\"email\" className=\"block text-sm font-medium text-foreground mb-2\">\n                Email\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Enter your email\"\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\" className=\"block text-sm font-medium text-foreground mb-2\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\"\n              disabled={loading}\n              data-testid=\"button-signin\"\n            >\n              {loading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n\n            <div className=\"text-center\">\n              <a href=\"#\" className=\"text-sm text-primary hover:underline\">\n                Forgot your password?\n              </a>\n            </div>\n          </form>\n\n          {/* Demo Setup Section */}\n          <div className=\"mt-6 pt-6 border-t border-border space-y-4\">\n            <div className=\"text-center\">\n              <Button\n                onClick={handleDemoSetup}\n                disabled={demoLoading}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-setup-demo\"\n              >\n                <Settings className=\"mr-2 w-4 h-4\" />\n                {demoLoading ? \"Setting up...\" : \"Setup Demo Data\"}\n              </Button>\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                Creates demo organization and users for testing\n              </p>\n            </div>\n            \n            {/* Demo Login Buttons */}\n            <div className=\"space-y-2\">\n              <p className=\"text-sm font-medium text-foreground text-center\">Quick Demo Login:</p>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button\n                  onClick={() => handleDemoLogin(\"admin\")}\n                  disabled={loading}\n                  variant=\"secondary\" \n                  size=\"sm\"\n                  data-testid=\"button-demo-admin\"\n                >\n                  Admin\n                </Button>\n                <Button\n                  onClick={() => handleDemoLogin(\"supervisor\")}\n                  disabled={loading}\n                  variant=\"secondary\"\n                  size=\"sm\" \n                  data-testid=\"button-demo-supervisor\"\n                >\n                  Supervisor\n                </Button>\n                <Button\n                  onClick={() => handleDemoLogin(\"agent\")}\n                  disabled={loading}\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  data-testid=\"button-demo-agent\"\n                >\n                  Call Agent\n                </Button>\n                <Button\n                  onClick={() => handleDemoLogin(\"field\")}\n                  disabled={loading}\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  data-testid=\"button-demo-field\"\n                >\n                  Field Agent\n                </Button>\n              </div>\n            </div>\n\n            {/* Firebase Setup Instructions */}\n            <div className=\"bg-muted p-3 rounded-lg\">\n              <p className=\"text-xs font-medium text-foreground mb-2\">⚠️ Firebase Setup Required:</p>\n              <div className=\"text-xs text-muted-foreground space-y-1\">\n                <p>1. <strong>Enable Authentication:</strong> Go to Firebase Console → Authentication → Sign-in method → Enable Email/Password</p>\n                <p>2. <strong>Set Firestore Rules:</strong> Go to Firestore → Rules, replace with:</p>\n                <div className=\"bg-background p-2 rounded text-xs font-mono mt-1\">\n                  <div>rules_version = '2';</div>\n                  <div>service cloud.firestore {'{'}</div>\n                  <div>&nbsp;&nbsp;match /databases/{'{database}'}/documents {'{'}</div>\n                  <div>&nbsp;&nbsp;&nbsp;&nbsp;// Users can read/write their own doc</div>\n                  <div>&nbsp;&nbsp;&nbsp;&nbsp;match /users/{'{{userId}}'} {'{'}</div>\n                  <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allow read, write: if request.auth.uid == userId;</div>\n                  <div>&nbsp;&nbsp;&nbsp;&nbsp;{'}'}</div>\n                  <div>&nbsp;&nbsp;&nbsp;&nbsp;// Org-scoped access for demo</div>\n                  <div>&nbsp;&nbsp;&nbsp;&nbsp;match /{'{document=**}'} {'{'}</div>\n                  <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allow read, write: if request.auth != null;</div>\n                  <div>&nbsp;&nbsp;&nbsp;&nbsp;{'}'}</div>\n                  <div>&nbsp;&nbsp;{'}'}</div>\n                  <div>{'}'}</div>\n                </div>\n                <p>3. Click \"Publish\" to save rules</p>\n                <p>4. Click \"Setup Demo Data\" above to create test users</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","size_bytes":9997},"client/src/components/chat/ChatWidget.tsx":{"content":"import React, { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { MessageSquare, Send } from \"lucide-react\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { useChatMessages } from \"../../hooks/useFirestore\";\nimport { createChatMessage } from \"../../lib/firestore\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { ChatMessage } from \"../../types\";\n\nexport const ChatWidget: React.FC = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [sending, setSending] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { currentUser } = useAuth();\n  const { messages, loading } = useChatMessages(currentUser?.organizationId || \"\");\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim() || !currentUser || sending) return;\n\n    setSending(true);\n    try {\n      await createChatMessage({\n        organizationId: currentUser.organizationId,\n        senderId: currentUser.uid,\n        message: message.trim(),\n        type: \"group\",\n        isRead: false\n      });\n      setMessage(\"\");\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    } finally {\n      setSending(false);\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(n => n.charAt(0))\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  if (!currentUser) return null;\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-40\" data-testid=\"chat-widget\">\n      <Button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"w-14 h-14 rounded-full shadow-lg hover:shadow-xl transition-shadow\"\n        data-testid=\"button-chat-toggle\"\n      >\n        <MessageSquare className=\"text-xl\" />\n      </Button>\n      \n      {isOpen && (\n        <Card className=\"absolute bottom-16 right-0 w-80 shadow-xl\" data-testid=\"chat-panel\">\n          <div className=\"p-4 border-b border-border\">\n            <h3 className=\"font-semibold text-foreground\">Team Chat</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {messages.length > 0 ? `${messages.length} messages` : \"No messages\"}\n            </p>\n          </div>\n          \n          <div className=\"h-64 p-4 overflow-y-auto space-y-3\" data-testid=\"chat-messages\">\n            {loading ? (\n              <div className=\"text-center text-muted-foreground\">Loading messages...</div>\n            ) : messages.length === 0 ? (\n              <div className=\"text-center text-muted-foreground\">No messages yet</div>\n            ) : (\n              messages.slice().reverse().map((msg, index) => (\n                <div key={msg.id} className=\"flex items-start space-x-2\" data-testid={`chat-message-${index}`}>\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                    <span className=\"text-xs font-medium text-primary-foreground\">\n                      {getInitials(msg.senderId)}\n                    </span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-foreground\" data-testid={`chat-message-text-${index}`}>\n                      {msg.message}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\" data-testid={`chat-message-time-${index}`}>\n                      {formatDistanceToNow(msg.createdAt, { addSuffix: true })}\n                    </p>\n                  </div>\n                </div>\n              ))\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n          \n          <div className=\"p-4 border-t border-border\">\n            <form onSubmit={handleSendMessage} className=\"flex space-x-2\">\n              <Input\n                type=\"text\"\n                placeholder=\"Type a message...\"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                disabled={sending}\n                className=\"flex-1\"\n                data-testid=\"input-chat-message\"\n              />\n              <Button \n                type=\"submit\" \n                disabled={sending || !message.trim()}\n                size=\"sm\"\n                data-testid=\"button-send-message\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </form>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n};\n","size_bytes":4745},"client/src/components/dashboard/ConversionFunnel.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { ConversionFunnelData } from \"../../types\";\n\ninterface ConversionFunnelProps {\n  data: ConversionFunnelData;\n}\n\nexport const ConversionFunnel: React.FC<ConversionFunnelProps> = ({ data }) => {\n  const funnelSteps = [\n    {\n      label: \"Leads Generated\",\n      value: data.leads,\n      percentage: 100,\n      color: \"bg-blue-500\"\n    },\n    {\n      label: \"Contacted\",\n      value: data.contacted,\n      percentage: Math.round((data.contacted / data.leads) * 100),\n      color: \"bg-green-500\"\n    },\n    {\n      label: \"Meetings Scheduled\",\n      value: data.meetings,\n      percentage: Math.round((data.meetings / data.leads) * 100),\n      color: \"bg-amber-500\"\n    },\n    {\n      label: \"Conversions\",\n      value: data.conversions,\n      percentage: Math.round((data.conversions / data.leads) * 100),\n      color: \"bg-purple-500\"\n    }\n  ];\n\n  return (\n    <Card className=\"border border-border\" data-testid=\"conversion-funnel\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Conversion Funnel</h3>\n          <Select defaultValue=\"30\">\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"30\">Last 30 days</SelectItem>\n              <SelectItem value=\"90\">Last 90 days</SelectItem>\n              <SelectItem value=\"365\">This year</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {funnelSteps.map((step, index) => (\n            <div \n              key={index} \n              className=\"flex items-center justify-between p-4 bg-muted rounded-lg\"\n              data-testid={`funnel-step-${index}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-4 h-4 ${step.color} rounded`}></div>\n                <span className=\"font-medium\">{step.label}</span>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-semibold\" data-testid={`funnel-value-${index}`}>\n                  {step.value.toLocaleString()}\n                </p>\n                <p className=\"text-sm text-muted-foreground\" data-testid={`funnel-percentage-${index}`}>\n                  {step.percentage}%\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":2715},"client/src/components/dashboard/Leaderboard.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport type { TopPerformer } from \"../../types\";\n\ninterface LeaderboardProps {\n  performers: TopPerformer[];\n}\n\nexport const Leaderboard: React.FC<LeaderboardProps> = ({ performers }) => {\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(n => n.charAt(0))\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case \"admin\": return \"bg-red-600\";\n      case \"supervisor\": return \"bg-blue-600\";\n      case \"call-center\": return \"bg-green-600\";\n      case \"field-agent\": return \"bg-purple-600\";\n      default: return \"bg-gray-600\";\n    }\n  };\n\n  return (\n    <Card className=\"border border-border\" data-testid=\"leaderboard\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Top Performers</h3>\n          <Button variant=\"link\" className=\"text-sm text-primary hover:underline p-0\">\n            View All\n          </Button>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {performers.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"leaderboard-empty\">\n              No performance data available\n            </div>\n          ) : (\n            performers.map((performer, index) => (\n              <div \n                key={performer.id} \n                className=\"flex items-center justify-between p-4 bg-muted rounded-lg\"\n                data-testid={`performer-${index}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-8 h-8 ${getRoleColor(performer.role)} rounded-full flex items-center justify-center`}>\n                    <span className=\"text-sm font-medium text-white\">\n                      {getInitials(performer.name)}\n                    </span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\" data-testid={`performer-name-${index}`}>\n                      {performer.name}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground capitalize\" data-testid={`performer-role-${index}`}>\n                      {performer.role.replace(\"-\", \" \")}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-semibold text-foreground\" data-testid={`performer-conversions-${index}`}>\n                    {performer.conversions} conversions\n                  </p>\n                  <p className=\"text-sm text-green-600\" data-testid={`performer-growth-${index}`}>\n                    {performer.growth > 0 ? '+' : ''}{performer.growth}% this month\n                  </p>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":3073},"client/src/components/dashboard/MetricsGrid.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, TrendingUp, UserCheck, DollarSign } from \"lucide-react\";\nimport type { DashboardMetrics } from \"../../types\";\n\ninterface MetricsGridProps {\n  metrics: DashboardMetrics;\n}\n\nexport const MetricsGrid: React.FC<MetricsGridProps> = ({ metrics }) => {\n  const metricCards = [\n    {\n      title: \"Total Leads\",\n      value: metrics.totalLeads.toLocaleString(),\n      icon: Users,\n      iconColor: \"text-blue-600\",\n      iconBg: \"bg-blue-100\",\n      change: \"+12.5%\",\n      changeLabel: \"vs last month\"\n    },\n    {\n      title: \"Conversion Rate\",\n      value: `${metrics.conversionRate.toFixed(1)}%`,\n      icon: TrendingUp,\n      iconColor: \"text-green-600\",\n      iconBg: \"bg-green-100\",\n      change: \"+3.2%\",\n      changeLabel: \"vs last month\"\n    },\n    {\n      title: \"Active Agents\",\n      value: metrics.activeAgents.toString(),\n      icon: UserCheck,\n      iconColor: \"text-purple-600\",\n      iconBg: \"bg-purple-100\",\n      change: \"+5\",\n      changeLabel: \"new this week\"\n    },\n    {\n      title: \"Revenue\",\n      value: `$${(metrics.revenue / 1000).toFixed(0)}K`,\n      icon: DollarSign,\n      iconColor: \"text-amber-600\",\n      iconBg: \"bg-amber-100\",\n      change: \"+18.7%\",\n      changeLabel: \"vs last month\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\" data-testid=\"metrics-grid\">\n      {metricCards.map((metric, index) => {\n        const Icon = metric.icon;\n        \n        return (\n          <Card key={index} className=\"border border-border\" data-testid={`metric-card-${index}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">\n                    {metric.title}\n                  </p>\n                  <p className=\"text-3xl font-bold text-foreground\" data-testid={`metric-value-${index}`}>\n                    {metric.value}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 ${metric.iconBg} rounded-lg flex items-center justify-center`}>\n                  <Icon className={`text-xl ${metric.iconColor}`} />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-4 text-sm\">\n                <span className=\"text-green-600 font-medium\" data-testid={`metric-change-${index}`}>\n                  {metric.change}\n                </span>\n                <span className=\"text-muted-foreground ml-2\">\n                  {metric.changeLabel}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};\n","size_bytes":2776},"client/src/components/dashboard/QuickActions.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Upload, UserPlus, Settings } from \"lucide-react\";\nimport { useAuth } from \"../../hooks/useAuth\";\n\ninterface QuickActionsProps {\n  onAddLead?: () => void;\n  onImportLeads?: () => void;\n  onAddTeamMember?: () => void;\n  onConfigureTargets?: () => void;\n}\n\nexport const QuickActions: React.FC<QuickActionsProps> = ({\n  onAddLead,\n  onImportLeads,\n  onAddTeamMember,\n  onConfigureTargets\n}) => {\n  const { currentUser } = useAuth();\n  \n  if (!currentUser) return null;\n\n  const canManageTeam = [\"admin\", \"supervisor\"].includes(currentUser.role);\n\n  return (\n    <Card className=\"border border-border\" data-testid=\"quick-actions\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-6\">Quick Actions</h3>\n        \n        <div className=\"space-y-3\">\n          <Button \n            onClick={onAddLead}\n            className=\"w-full flex items-center space-x-3 p-4 justify-start\"\n            data-testid=\"button-add-lead\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            <span className=\"font-medium\">Add New Lead</span>\n          </Button>\n          \n          {canManageTeam && (\n            <>\n              <Button \n                onClick={onImportLeads}\n                variant=\"secondary\" \n                className=\"w-full flex items-center space-x-3 p-4 justify-start\"\n                data-testid=\"button-import-leads\"\n              >\n                <Upload className=\"w-4 h-4\" />\n                <span className=\"font-medium\">Import Leads</span>\n              </Button>\n              \n              <Button \n                onClick={onAddTeamMember}\n                variant=\"secondary\" \n                className=\"w-full flex items-center space-x-3 p-4 justify-start\"\n                data-testid=\"button-add-team-member\"\n              >\n                <UserPlus className=\"w-4 h-4\" />\n                <span className=\"font-medium\">Add Team Member</span>\n              </Button>\n              \n              <Button \n                onClick={onConfigureTargets}\n                variant=\"secondary\" \n                className=\"w-full flex items-center space-x-3 p-4 justify-start\"\n                data-testid=\"button-configure-targets\"\n              >\n                <Settings className=\"w-4 h-4\" />\n                <span className=\"font-medium\">Configure Targets</span>\n              </Button>\n            </>\n          )}\n        </div>\n\n        <div className=\"mt-8 pt-6 border-t border-border\">\n          <h4 className=\"text-sm font-semibold text-foreground mb-4\">System Status</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Active Users</span>\n              <span className=\"text-sm font-medium text-green-600\" data-testid=\"status-active-users\">\n                Online\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Data Sync</span>\n              <span className=\"text-sm font-medium text-green-600\" data-testid=\"status-data-sync\">\n                Up to date\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Server Status</span>\n              <span className=\"text-sm font-medium text-green-600\" data-testid=\"status-server\">\n                Healthy\n              </span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":3745},"client/src/components/dashboard/RecentActivity.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { RecentActivityItem } from \"../../types\";\n\ninterface RecentActivityProps {\n  activities: RecentActivityItem[];\n}\n\nexport const RecentActivity: React.FC<RecentActivityProps> = ({ activities }) => {\n  const getActivityColor = (type: string) => {\n    switch (type) {\n      case \"call\": return \"bg-blue-500\";\n      case \"meeting\": return \"bg-green-500\";\n      case \"conversion\": return \"bg-purple-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const getBadgeVariant = (type: string) => {\n    switch (type) {\n      case \"call\": return \"secondary\";\n      case \"meeting\": return \"default\";\n      case \"conversion\": return \"destructive\";\n      default: return \"outline\";\n    }\n  };\n\n  return (\n    <Card className=\"lg:col-span-2 border border-border\" data-testid=\"recent-activity\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Recent Lead Activity</h3>\n          <Button variant=\"link\" className=\"text-sm text-primary hover:underline p-0\">\n            View All Leads\n          </Button>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {activities.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"activity-empty\">\n              No recent activity\n            </div>\n          ) : (\n            activities.map((activity, index) => (\n              <div \n                key={activity.id} \n                className=\"flex items-start space-x-4 p-4 hover:bg-muted rounded-lg transition-colors\"\n                data-testid={`activity-${index}`}\n              >\n                <div \n                  className={`w-2 h-2 ${getActivityColor(activity.type)} rounded-full mt-2 flex-shrink-0`}\n                ></div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm text-foreground\">\n                    <span className=\"font-medium\" data-testid={`activity-agent-${index}`}>\n                      {activity.agentName}\n                    </span>\n                    <span className=\"text-muted-foreground\"> {activity.action} </span>\n                    <span className=\"font-medium\" data-testid={`activity-lead-${index}`}>\n                      {activity.leadName}\n                    </span>\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-1\" data-testid={`activity-time-${index}`}>\n                    {formatDistanceToNow(activity.timestamp, { addSuffix: true })}\n                  </p>\n                </div>\n                <Badge \n                  variant={getBadgeVariant(activity.type)} \n                  className=\"capitalize\"\n                  data-testid={`activity-badge-${index}`}\n                >\n                  {activity.type}\n                </Badge>\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":3176},"client/src/components/layout/Header.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { Bell, Plus } from \"lucide-react\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle: string;\n  onQuickAction?: () => void;\n  quickActionLabel?: string;\n}\n\nexport const Header: React.FC<HeaderProps> = ({ \n  title, \n  subtitle, \n  onQuickAction,\n  quickActionLabel = \"Quick Action\"\n}) => {\n  const { currentUser } = useAuth();\n\n  if (!currentUser) return null;\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\" data-testid=\"header\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-page-title\">\n            {title}\n          </h1>\n          <p className=\"text-muted-foreground mt-1\" data-testid=\"text-page-subtitle\">\n            {subtitle}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"p-2 text-muted-foreground hover:text-foreground relative\"\n            data-testid=\"button-notifications\"\n          >\n            <Bell className=\"text-lg\" />\n            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full text-xs\"></span>\n          </Button>\n          {onQuickAction && (\n            <Button \n              onClick={onQuickAction}\n              className=\"px-4 py-2 font-medium\"\n              data-testid=\"button-quick-action\"\n            >\n              <Plus className=\"mr-2 w-4 h-4\" />\n              {quickActionLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n};\n","size_bytes":1730},"client/src/components/layout/Layout.tsx":{"content":"import React from \"react\";\nimport { Sidebar } from \"./Sidebar\";\nimport { Header } from \"./Header\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  title: string;\n  subtitle: string;\n  onQuickAction?: () => void;\n  quickActionLabel?: string;\n}\n\nexport const Layout: React.FC<LayoutProps> = ({ \n  children, \n  title, \n  subtitle, \n  onQuickAction,\n  quickActionLabel \n}) => {\n  return (\n    <div className=\"flex h-screen bg-background\" data-testid=\"layout\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title={title} \n          subtitle={subtitle} \n          onQuickAction={onQuickAction}\n          quickActionLabel={quickActionLabel}\n        />\n        <main className=\"flex-1 overflow-auto p-6\" data-testid=\"main-content\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n};\n","size_bytes":861},"client/src/components/layout/Sidebar.tsx":{"content":"import React from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  ChartLine, \n  Users, \n  Phone, \n  Calendar, \n  DollarSign, \n  BarChart3, \n  MessageSquare, \n  Settings,\n  LogOut\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigationItems = [\n  { path: \"/\", icon: ChartLine, label: \"Dashboard\", roles: [\"admin\", \"supervisor\", \"call-center\", \"field-agent\"] },\n  { path: \"/leads\", icon: Users, label: \"Leads\", roles: [\"admin\", \"supervisor\", \"call-center\", \"field-agent\"] },\n  { path: \"/calls\", icon: Phone, label: \"Calls\", roles: [\"admin\", \"supervisor\", \"call-center\"] },\n  { path: \"/meetings\", icon: Calendar, label: \"Meetings\", roles: [\"admin\", \"supervisor\", \"call-center\", \"field-agent\"] },\n  { path: \"/commissions\", icon: DollarSign, label: \"Commissions\", roles: [\"admin\", \"supervisor\", \"call-center\", \"field-agent\"] },\n  { path: \"/analytics\", icon: BarChart3, label: \"Analytics\", roles: [\"admin\", \"supervisor\"] },\n  { path: \"/settings\", icon: Settings, label: \"Settings\", roles: [\"admin\", \"supervisor\"] }\n];\n\nexport const Sidebar: React.FC = () => {\n  const [location] = useLocation();\n  const { currentUser, signOut } = useAuth();\n\n  if (!currentUser) return null;\n\n  const filteredNavigation = navigationItems.filter(item => \n    item.roles.includes(currentUser.role)\n  );\n\n  const handleSignOut = async () => {\n    try {\n      await signOut();\n    } catch (error) {\n      console.error(\"Error signing out:\", error);\n    }\n  };\n\n  return (\n    <div className=\"w-64 bg-card border-r border-border flex flex-col\" data-testid=\"sidebar\">\n      {/* Logo & Organization */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <ChartLine className=\"text-lg text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"font-semibold text-foreground\" data-testid=\"text-organization\">\n              Sales Management\n            </h2>\n            <p className=\"text-sm text-muted-foreground capitalize\" data-testid=\"text-user-role\">\n              {currentUser.role.replace(\"-\", \" \")}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 px-4 py-6 space-y-2\" data-testid=\"nav-menu\">\n        {filteredNavigation.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.path;\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <a \n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 text-sm font-medium rounded-lg transition-colors\",\n                  isActive \n                    ? \"bg-primary text-primary-foreground\" \n                    : \"text-muted-foreground hover:text-foreground hover:bg-accent\"\n                )}\n                data-testid={`nav-${item.label.toLowerCase()}`}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span>{item.label}</span>\n              </a>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* Chat Link */}\n      <div className=\"px-4 py-2\">\n        <Link href=\"/chat\">\n          <a \n            className={cn(\n              \"flex items-center space-x-3 px-3 py-2 text-sm font-medium rounded-lg transition-colors\",\n              location === \"/chat\"\n                ? \"bg-primary text-primary-foreground\" \n                : \"text-muted-foreground hover:text-foreground hover:bg-accent\"\n            )}\n            data-testid=\"nav-chat\"\n          >\n            <MessageSquare className=\"w-5 h-5\" />\n            <span>Chat</span>\n          </a>\n        </Link>\n      </div>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-sm font-medium text-primary-foreground\" data-testid=\"text-user-initials\">\n              {currentUser.name?.charAt(0)?.toUpperCase() || \"U\"}\n            </span>\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-user-name\">\n              {currentUser.name}\n            </p>\n            <p className=\"text-xs text-muted-foreground\" data-testid=\"text-user-email\">\n              {currentUser.email}\n            </p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleSignOut}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-signout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","size_bytes":4961},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Sales Management System\n\n## Overview\n\nThis is a comprehensive sales management platform built as a full-stack web application designed to help organizations manage their entire sales lifecycle from lead capture through conversion and commission tracking. The system supports multiple user roles (Admin, Supervisor, Call Center Agent, Field Agent) with role-based access control and features for lead management, call tracking, meeting scheduling, and performance analytics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side is built using React with TypeScript and follows a modern component-based architecture:\n\n- **Framework**: React 18 with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming and design tokens\n- **Forms**: React Hook Form with Zod validation for robust form handling\n- **State Management**: TanStack Query for server state management and caching\n- **Build Tool**: Vite for fast development and optimized production builds\n\nThe frontend follows a modular structure with clear separation of concerns:\n- `/pages` - Route components for different application views\n- `/components` - Reusable UI components organized by feature\n- `/hooks` - Custom React hooks for shared logic\n- `/lib` - Utility functions and external service integrations\n- `/contexts` - React contexts for global state (auth, theme)\n\n### Backend Architecture\nThe server-side uses Express.js with TypeScript in a monolithic architecture:\n\n- **Framework**: Express.js with TypeScript for the REST API\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema**: Shared TypeScript schemas between client and server using Zod\n- **Session Management**: Express sessions with PostgreSQL store\n- **Development**: Hot module replacement with Vite integration\n\nThe backend is structured with:\n- `/server` - Express server setup and configuration\n- `/shared` - Shared schemas and types between frontend and backend\n- Storage abstraction layer with in-memory implementation for development\n\n### Data Storage Solutions\nThe application uses a hybrid approach for data persistence:\n\n- **Primary Database**: PostgreSQL with Neon serverless for production scalability\n- **ORM**: Drizzle ORM provides type-safe database operations and migrations\n- **Development Storage**: In-memory storage implementation for rapid development\n- **Schema Management**: Centralized schema definitions shared between client and server\n\nThe database schema supports:\n- Multi-tenant organization structure\n- Role-based user management\n- Lead lifecycle tracking\n- Call and meeting management\n- Commission and analytics data\n\n### Authentication and Authorization\nFirebase Authentication is used for user management with role-based access control:\n\n- **Provider**: Firebase Auth for secure user authentication\n- **Session Management**: Firebase auth state combined with application user data\n- **Role-Based Access**: Four distinct roles (admin, supervisor, call-center, field-agent)\n- **Context Management**: React context provides auth state throughout the application\n- **Route Protection**: Role-based navigation and component rendering\n\nUser data is stored in Firebase Firestore with the authentication UID as the key, enabling seamless integration between auth and user profiles.\n\n### External Dependencies\n\n- **Firebase**: Authentication, Firestore for user data, and real-time features\n- **Neon Database**: Serverless PostgreSQL hosting for production\n- **Vercel/Replit**: Deployment and hosting platform integration\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form state management and validation\n- **shadcn/ui**: Pre-built accessible UI components\n- **Tailwind CSS**: Utility-first CSS framework\n- **Drizzle ORM**: Type-safe PostgreSQL ORM\n- **Wouter**: Lightweight client-side routing\n- **Zod**: Schema validation for forms and API data\n\nThe system is designed to be cloud-native with serverless database capabilities and can be deployed on modern hosting platforms with minimal configuration.","size_bytes":4285},"client/src/components/leads/LeadModal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { useToast } from \"../../hooks/use-toast\";\nimport { createLead, updateLead } from \"../../lib/firestore\";\nimport { User, Lead, LeadStatus, InsertLead } from \"../../types\";\nimport { Save, X } from \"lucide-react\";\n\n// Form validation schema\nconst leadFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email\").optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  company: z.string().optional(),\n  estimatedValue: z.number().min(0, \"Value must be positive\").optional(),\n  status: z.enum([\"new\", \"contacted\", \"interested\", \"meeting\", \"converted\", \"closed\"]),\n  source: z.string().optional(),\n  notes: z.string().optional(),\n  assignedToId: z.string().optional()\n});\n\ntype LeadFormData = z.infer<typeof leadFormSchema>;\n\ninterface LeadModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  lead?: Lead;\n  agents?: User[];\n  mode: \"create\" | \"edit\" | \"view\";\n}\n\nexport const LeadModal: React.FC<LeadModalProps> = ({ \n  isOpen, \n  onClose, \n  lead, \n  agents = [], \n  mode \n}) => {\n  const [loading, setLoading] = useState(false);\n  const { currentUser } = useAuth();\n  const { toast } = useToast();\n  \n  const form = useForm<LeadFormData>({\n    resolver: zodResolver(leadFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      company: \"\",\n      estimatedValue: undefined,\n      status: \"new\",\n      source: \"\",\n      notes: \"\",\n      assignedToId: \"unassigned\"\n    }\n  });\n\n  // Reset form when modal opens/closes or lead changes\n  useEffect(() => {\n    if (isOpen && lead && (mode === \"edit\" || mode === \"view\")) {\n      form.reset({\n        name: lead.name,\n        email: lead.email || \"\",\n        phone: lead.phone || \"\",\n        company: lead.company || \"\",\n        estimatedValue: lead.estimatedValue,\n        status: lead.status,\n        source: lead.source || \"\",\n        notes: lead.notes || \"\",\n        assignedToId: lead.assignedToId || \"unassigned\"\n      });\n    } else if (isOpen && mode === \"create\") {\n      form.reset({\n        name: \"\",\n        email: \"\",\n        phone: \"\",\n        company: \"\",\n        estimatedValue: undefined,\n        status: \"new\",\n        source: \"\",\n        notes: \"\",\n        assignedToId: \"unassigned\"\n      });\n    }\n  }, [isOpen, lead, mode, form]);\n\n  const handleSubmit = async (data: LeadFormData) => {\n    if (!currentUser?.organizationId) {\n      toast({\n        title: \"Error\",\n        description: \"No organization found\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const leadData: InsertLead = {\n        ...data,\n        organizationId: currentUser.organizationId,\n        estimatedValue: data.estimatedValue || 0,\n        email: data.email || undefined,\n        phone: data.phone || undefined,\n        company: data.company || undefined,\n        source: data.source || undefined,\n        notes: data.notes || undefined,\n        assignedToId: data.assignedToId === \"unassigned\" ? undefined : data.assignedToId\n      };\n\n      if (mode === \"create\") {\n        await createLead(leadData);\n        toast({\n          title: \"Success\",\n          description: \"Lead created successfully\"\n        });\n      } else if (mode === \"edit\" && lead) {\n        await updateLead(lead.id, leadData);\n        toast({\n          title: \"Success\", \n          description: \"Lead updated successfully\"\n        });\n      }\n\n      onClose();\n      form.reset();\n    } catch (error: any) {\n      console.error(\"Error saving lead:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save lead\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const isReadOnly = mode === \"view\";\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!open) onClose(); }}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"lead-modal-title\">\n            {mode === \"create\" && \"Create New Lead\"}\n            {mode === \"edit\" && \"Edit Lead\"}\n            {mode === \"view\" && \"Lead Details\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            {/* Name - Required */}\n            <div className=\"col-span-2\">\n              <Label htmlFor=\"name\">Name *</Label>\n              <Input\n                id=\"name\"\n                {...form.register(\"name\")}\n                placeholder=\"Lead's full name\"\n                disabled={isReadOnly}\n                data-testid=\"input-lead-name\"\n              />\n              {form.formState.errors.name && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.name.message}\n                </p>\n              )}\n            </div>\n\n            {/* Email */}\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...form.register(\"email\")}\n                placeholder=\"contact@example.com\"\n                disabled={isReadOnly}\n                data-testid=\"input-lead-email\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n\n            {/* Phone */}\n            <div>\n              <Label htmlFor=\"phone\">Phone</Label>\n              <Input\n                id=\"phone\"\n                {...form.register(\"phone\")}\n                placeholder=\"+1 (555) 123-4567\"\n                disabled={isReadOnly}\n                data-testid=\"input-lead-phone\"\n              />\n            </div>\n\n            {/* Company */}\n            <div>\n              <Label htmlFor=\"company\">Company</Label>\n              <Input\n                id=\"company\"\n                {...form.register(\"company\")}\n                placeholder=\"Company name\"\n                disabled={isReadOnly}\n                data-testid=\"input-lead-company\"\n              />\n            </div>\n\n            {/* Estimated Value */}\n            <div>\n              <Label htmlFor=\"estimatedValue\">Estimated Value ($)</Label>\n              <Input\n                id=\"estimatedValue\"\n                type=\"number\"\n                min=\"0\"\n                step=\"0.01\"\n                {...form.register(\"estimatedValue\", { valueAsNumber: true })}\n                placeholder=\"10000\"\n                disabled={isReadOnly}\n                data-testid=\"input-lead-value\"\n              />\n            </div>\n\n            {/* Status */}\n            <div>\n              <Label htmlFor=\"status\">Status</Label>\n              <Select\n                value={form.watch(\"status\")}\n                onValueChange={(value: LeadStatus) => form.setValue(\"status\", value)}\n                disabled={isReadOnly}\n              >\n                <SelectTrigger data-testid=\"select-lead-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"new\">New</SelectItem>\n                  <SelectItem value=\"contacted\">Contacted</SelectItem>\n                  <SelectItem value=\"interested\">Interested</SelectItem>\n                  <SelectItem value=\"meeting\">Meeting</SelectItem>\n                  <SelectItem value=\"converted\">Converted</SelectItem>\n                  <SelectItem value=\"closed\">Closed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Source */}\n            <div>\n              <Label htmlFor=\"source\">Source</Label>\n              <Input\n                id=\"source\"\n                {...form.register(\"source\")}\n                placeholder=\"Website, Referral, Cold Call...\"\n                disabled={isReadOnly}\n                data-testid=\"input-lead-source\"\n              />\n            </div>\n\n            {/* Assigned Agent */}\n            <div>\n              <Label htmlFor=\"assignedAgent\">Assigned Agent</Label>\n              <Select\n                value={form.watch(\"assignedToId\")}\n                onValueChange={(value) => form.setValue(\"assignedToId\", value)}\n                disabled={isReadOnly}\n              >\n                <SelectTrigger data-testid=\"select-assigned-agent\">\n                  <SelectValue placeholder=\"Select agent...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                  {agents.map((agent) => (\n                    <SelectItem key={agent.id} value={agent.id}>\n                      {agent.name} ({agent.role})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Notes */}\n            <div className=\"col-span-2\">\n              <Label htmlFor=\"notes\">Notes</Label>\n              <Textarea\n                id=\"notes\"\n                {...form.register(\"notes\")}\n                placeholder=\"Additional notes about this lead...\"\n                rows={3}\n                disabled={isReadOnly}\n                data-testid=\"textarea-lead-notes\"\n              />\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-cancel-lead\"\n            >\n              <X className=\"w-4 h-4 mr-2\" />\n              {isReadOnly ? \"Close\" : \"Cancel\"}\n            </Button>\n            \n            {!isReadOnly && (\n              <Button\n                type=\"submit\"\n                disabled={loading}\n                data-testid=\"button-save-lead\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {loading ? \"Saving...\" : mode === \"create\" ? \"Create Lead\" : \"Update Lead\"}\n              </Button>\n            )}\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":10830},"client/src/components/settings/ImportResultsModal.tsx":{"content":"import React from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { CheckCircle, XCircle, AlertTriangle, Download, Copy } from \"lucide-react\";\nimport type { ImportResult, ImportError, DuplicateInfo } from \"../../lib/excel-import\";\n\ninterface ImportResultsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  result: ImportResult | null;\n  onConfirmImport?: () => void;\n  loading?: boolean;\n}\n\nexport const ImportResultsModal: React.FC<ImportResultsModalProps> = ({\n  isOpen,\n  onClose,\n  result,\n  onConfirmImport,\n  loading = false\n}) => {\n  if (!result) return null;\n\n  const { success, totalRows, validLeads, errors, duplicates = [] } = result;\n\n  const getStatusIcon = () => {\n    if (validLeads.length > 0 && errors.length === 0 && duplicates.length === 0) {\n      return <CheckCircle className=\"h-6 w-6 text-green-500\" />;\n    } else if (validLeads.length > 0 && (errors.length > 0 || duplicates.length > 0)) {\n      return <AlertTriangle className=\"h-6 w-6 text-yellow-500\" />;\n    } else {\n      return <XCircle className=\"h-6 w-6 text-red-500\" />;\n    }\n  };\n\n  const getStatusMessage = () => {\n    const parts: string[] = [];\n    \n    if (validLeads.length > 0) {\n      parts.push(`${validLeads.length} leads ready to import`);\n    }\n    if (errors.length > 0) {\n      parts.push(`${errors.length} errors found`);\n    }\n    if (duplicates.length > 0) {\n      parts.push(`${duplicates.length} duplicates detected`);\n    }\n    \n    if (parts.length === 0) {\n      return \"No valid leads found to import.\";\n    } else if (validLeads.length > 0 && errors.length === 0 && duplicates.length === 0) {\n      return \"All leads processed successfully!\";\n    } else {\n      return parts.join(', ') + '.';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!open) onClose(); }}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-3\">\n            {getStatusIcon()}\n            Excel Import Results\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Summary */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-lg font-medium\">{getStatusMessage()}</p>\n                <div className=\"flex justify-center gap-6 text-sm text-muted-foreground\">\n                  <span>Total Rows: {totalRows}</span>\n                  <span className=\"text-green-600\">Valid: {validLeads.length}</span>\n                  <span className=\"text-red-600\">Errors: {errors.length}</span>\n                  <span className=\"text-orange-600\">Duplicates: {duplicates.length}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Valid Leads Preview */}\n          {validLeads.length > 0 && (\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-semibold text-green-600 flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4\" />\n                  Valid Leads ({validLeads.length})\n                </h4>\n                <Badge variant=\"secondary\">{validLeads.length} leads ready</Badge>\n              </div>\n              <ScrollArea className=\"h-40 border rounded-md\">\n                <div className=\"p-3 space-y-2\">\n                  {validLeads.slice(0, 10).map((lead, index) => (\n                    <div key={index} className=\"flex items-center justify-between text-sm p-2 hover:bg-muted rounded\">\n                      <div className=\"flex-1\">\n                        <span className=\"font-medium\">{lead.name}</span>\n                        {lead.company && <span className=\"text-muted-foreground ml-2\">({lead.company})</span>}\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        {lead.email && <Badge variant=\"outline\" className=\"text-xs\">Email</Badge>}\n                        {lead.phone && <Badge variant=\"outline\" className=\"text-xs\">Phone</Badge>}\n                        <Badge variant=\"secondary\" className=\"text-xs\">{lead.status}</Badge>\n                      </div>\n                    </div>\n                  ))}\n                  {validLeads.length > 10 && (\n                    <div className=\"text-center text-sm text-muted-foreground py-2\">\n                      ... and {validLeads.length - 10} more leads\n                    </div>\n                  )}\n                </div>\n              </ScrollArea>\n            </div>\n          )}\n\n          {/* Errors */}\n          {errors.length > 0 && (\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-semibold text-red-600 flex items-center gap-2\">\n                  <XCircle className=\"h-4 w-4\" />\n                  Errors ({errors.length})\n                </h4>\n                <Badge variant=\"destructive\">{errors.length} issues</Badge>\n              </div>\n              <ScrollArea className=\"h-40 border rounded-md\">\n                <div className=\"p-3 space-y-2\">\n                  {errors.map((error, index) => (\n                    <div key={index} className=\"flex items-start gap-3 text-sm p-2 bg-red-50 dark:bg-red-950/20 rounded\">\n                      <Badge variant=\"outline\" className=\"text-xs\">Row {error.row}</Badge>\n                      <div className=\"flex-1\">\n                        {error.field && (\n                          <span className=\"font-medium text-red-600\">{error.field}: </span>\n                        )}\n                        <span className=\"text-muted-foreground\">{error.message}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </div>\n          )}\n\n          {/* Duplicates */}\n          {duplicates.length > 0 && (\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-semibold text-orange-600 flex items-center gap-2\">\n                  <Copy className=\"h-4 w-4\" />\n                  Duplicates ({duplicates.length})\n                </h4>\n                <Badge variant=\"outline\" className=\"border-orange-200\">{duplicates.length} duplicates</Badge>\n              </div>\n              <ScrollArea className=\"h-40 border rounded-md\">\n                <div className=\"p-3 space-y-2\">\n                  {duplicates.map((duplicate, index) => (\n                    <div key={index} className=\"flex items-start gap-3 text-sm p-2 bg-orange-50 dark:bg-orange-950/20 rounded\">\n                      <Badge variant=\"outline\" className=\"text-xs\">Row {duplicate.row}</Badge>\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\">{duplicate.lead.name}</div>\n                        {duplicate.lead.company && (\n                          <div className=\"text-muted-foreground text-xs\">Company: {duplicate.lead.company}</div>\n                        )}\n                        <div className=\"text-muted-foreground text-xs mt-1\">\n                          <span className=\"font-medium\">Duplicate type:</span> {duplicate.duplicateType}\n                          {duplicate.matchedFields.length > 0 && (\n                            <>\n                              <span className=\"mx-1\">•</span>\n                              <span className=\"font-medium\">Matched:</span> {duplicate.matchedFields.join(', ')}\n                            </>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        {duplicate.lead.email && <Badge variant=\"outline\" className=\"text-xs\">Email</Badge>}\n                        {duplicate.lead.phone && <Badge variant=\"outline\" className=\"text-xs\">Phone</Badge>}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n              <div className=\"text-xs text-muted-foreground p-2 bg-orange-50 dark:bg-orange-950/20 rounded\">\n                <strong>Note:</strong> Duplicates were detected based on matching email, phone number, or name+company combination. These leads were excluded from import to prevent data duplication.\n              </div>\n            </div>\n          )}\n\n          {/* Actions */}\n          <div className=\"flex items-center justify-between pt-4 border-t\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-cancel-import\"\n            >\n              Cancel\n            </Button>\n            \n            <div className=\"flex gap-2\">\n              {validLeads.length > 0 && (\n                <Button\n                  onClick={onConfirmImport}\n                  disabled={loading}\n                  data-testid=\"button-confirm-import\"\n                >\n                  {loading ? \"Importing...\" : `Import ${validLeads.length} Leads`}\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":9544},"client/src/lib/excel-import.ts":{"content":"import * as XLSX from 'xlsx';\nimport { z } from 'zod';\nimport type { InsertLead, LeadStatus } from '../types';\n\n// Excel lead import schema\nconst excelLeadSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email().optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  company: z.string().optional(),\n  estimatedValue: z.union([z.number(), z.string().transform(val => {\n    const num = parseFloat(val);\n    return isNaN(num) ? 0 : num;\n  })]).optional(),\n  status: z.enum([\"new\", \"contacted\", \"interested\", \"meeting\", \"converted\", \"closed\"]).optional().default(\"new\"),\n  source: z.string().optional(),\n  notes: z.string().optional()\n});\n\nexport interface ImportResult {\n  success: boolean;\n  totalRows: number;\n  validLeads: InsertLead[];\n  errors: ImportError[];\n  duplicates?: DuplicateInfo[];\n}\n\nexport interface DuplicateInfo {\n  row: number;\n  lead: InsertLead;\n  duplicateType: 'internal' | 'external';\n  matchedFields: string[];\n  existingLeadId?: string;\n}\n\nexport interface ImportError {\n  row: number;\n  field?: string;\n  message: string;\n}\n\n// Expected column mappings (case insensitive)\nconst COLUMN_MAPPINGS: Record<string, string> = {\n  'name': 'name',\n  'full name': 'name',\n  'lead name': 'name',\n  'customer name': 'name',\n  'email': 'email',\n  'email address': 'email',\n  'phone': 'phone',\n  'phone number': 'phone',\n  'mobile': 'phone',\n  'company': 'company',\n  'company name': 'company',\n  'organization': 'company',\n  'estimated value': 'estimatedValue',\n  'value': 'estimatedValue',\n  'deal value': 'estimatedValue',\n  'revenue': 'estimatedValue',\n  'status': 'status',\n  'lead status': 'status',\n  'source': 'source',\n  'lead source': 'source',\n  'notes': 'notes',\n  'comments': 'notes',\n  'description': 'notes'\n};\n\nconst normalizeColumnName = (columnName: string): string => {\n  const normalized = columnName.toLowerCase().trim();\n  return COLUMN_MAPPINGS[normalized] || columnName;\n};\n\nconst validateLeadStatus = (status: string): LeadStatus => {\n  const normalizedStatus = status.toLowerCase().trim();\n  const statusMappings: Record<string, LeadStatus> = {\n    'new': 'new',\n    'contacted': 'contacted',\n    'interested': 'interested',\n    'meeting': 'meeting',\n    'scheduled': 'meeting',\n    'converted': 'converted',\n    'closed': 'closed',\n    'won': 'converted',\n    'lost': 'closed'\n  };\n  \n  return statusMappings[normalizedStatus] || 'new';\n};\n\n// Function to normalize values for duplicate detection\nconst normalizeForComparison = (value?: string): string => {\n  if (!value) return '';\n  return value.toLowerCase().trim().replace(/\\s+/g, ' ');\n};\n\n// Function to detect duplicates within the leads array\nconst detectInternalDuplicates = (leads: (InsertLead & { rowNumber: number })[]): DuplicateInfo[] => {\n  const seen = new Map<string, { lead: InsertLead; rowNumber: number }>();\n  const duplicates: DuplicateInfo[] = [];\n\n  for (const leadWithRow of leads) {\n    const { rowNumber, ...lead } = leadWithRow;\n    const matchedFields: string[] = [];\n    let isDuplicate = false;\n\n    // Create composite keys for different matching scenarios\n    const emailKey = lead.email ? normalizeForComparison(lead.email) : '';\n    const phoneKey = lead.phone ? normalizeForComparison(lead.phone) : '';\n    const nameKey = normalizeForComparison(lead.name);\n\n    // Check for exact email match\n    if (emailKey) {\n      const existingByEmail = Array.from(seen.values()).find(item => \n        item.lead.email && normalizeForComparison(item.lead.email) === emailKey\n      );\n      if (existingByEmail) {\n        matchedFields.push('email');\n        isDuplicate = true;\n      }\n    }\n\n    // Check for exact phone match\n    if (phoneKey) {\n      const existingByPhone = Array.from(seen.values()).find(item => \n        item.lead.phone && normalizeForComparison(item.lead.phone) === phoneKey\n      );\n      if (existingByPhone) {\n        matchedFields.push('phone');\n        isDuplicate = true;\n      }\n    }\n\n    // Check for name and company combination\n    const companyKey = normalizeForComparison(lead.company);\n    if (nameKey && companyKey) {\n      const existingByNameCompany = Array.from(seen.values()).find(item => \n        normalizeForComparison(item.lead.name) === nameKey && \n        normalizeForComparison(item.lead.company) === companyKey\n      );\n      if (existingByNameCompany) {\n        matchedFields.push('name', 'company');\n        isDuplicate = true;\n      }\n    }\n\n    if (isDuplicate) {\n      duplicates.push({\n        row: rowNumber,\n        lead,\n        duplicateType: 'internal',\n        matchedFields\n      });\n    } else {\n      // Store this lead for future duplicate checking\n      const compositeKey = `${nameKey}|${emailKey}|${phoneKey}|${companyKey}`;\n      seen.set(compositeKey, { lead, rowNumber });\n    }\n  }\n\n  return duplicates;\n};\n\nexport const parseExcelFile = async (\n  file: File, \n  organizationId: string, \n  existingLeads: InsertLead[] = []\n): Promise<ImportResult> => {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      try {\n        const data = new Uint8Array(e.target?.result as ArrayBuffer);\n        const workbook = XLSX.read(data, { type: 'array' });\n        \n        // Get the first worksheet\n        const sheetName = workbook.SheetNames[0];\n        if (!sheetName) {\n          resolve({\n            success: false,\n            totalRows: 0,\n            validLeads: [],\n            errors: [{ row: 0, message: 'No worksheets found in the file' }]\n          });\n          return;\n        }\n        \n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];\n        \n        if (jsonData.length === 0) {\n          resolve({\n            success: false,\n            totalRows: 0,\n            validLeads: [],\n            errors: [{ row: 0, message: 'The worksheet is empty' }]\n          });\n          return;\n        }\n        \n        // Get headers from first row\n        const headers = jsonData[0].map((header: any) => \n          typeof header === 'string' ? normalizeColumnName(header) : ''\n        );\n        \n        // Check if we have required columns\n        if (!headers.includes('name')) {\n          resolve({\n            success: false,\n            totalRows: 0,\n            validLeads: [],\n            errors: [{ \n              row: 1, \n              message: 'Required column \"name\" not found. Please ensure your Excel file has a \"Name\" column.' \n            }]\n          });\n          return;\n        }\n        \n        const validLeadsWithRows: (InsertLead & { rowNumber: number })[] = [];\n        const errors: ImportError[] = [];\n        \n        // Process data rows (skip header)\n        for (let i = 1; i < jsonData.length; i++) {\n          const row = jsonData[i];\n          if (!row || row.every(cell => !cell)) continue; // Skip empty rows\n          \n          try {\n            // Map row data to object using headers\n            const rowData: any = {};\n            headers.forEach((header, index) => {\n              if (header && row[index] !== undefined && row[index] !== null) {\n                rowData[header] = row[index];\n              }\n            });\n            \n            // Skip rows without name\n            if (!rowData.name) {\n              errors.push({\n                row: i + 1,\n                field: 'name',\n                message: 'Name is required'\n              });\n              continue;\n            }\n            \n            // Clean and validate the data\n            const cleanedData = {\n              name: String(rowData.name).trim(),\n              email: rowData.email ? String(rowData.email).trim() : undefined,\n              phone: rowData.phone ? String(rowData.phone).trim() : undefined,\n              company: rowData.company ? String(rowData.company).trim() : undefined,\n              estimatedValue: rowData.estimatedValue ? Number(rowData.estimatedValue) || 0 : undefined,\n              status: rowData.status ? validateLeadStatus(String(rowData.status)) : 'new' as LeadStatus,\n              source: rowData.source ? String(rowData.source).trim() : 'Excel Import',\n              notes: rowData.notes ? String(rowData.notes).trim() : undefined\n            };\n            \n            // Validate using schema\n            const validationResult = excelLeadSchema.safeParse(cleanedData);\n            \n            if (validationResult.success) {\n              const lead: InsertLead = {\n                ...validationResult.data,\n                organizationId,\n                // Set email to undefined if empty string to match schema\n                email: cleanedData.email && cleanedData.email.length > 0 ? cleanedData.email : undefined,\n                // Ensure estimatedValue is a number or undefined\n                estimatedValue: typeof cleanedData.estimatedValue === 'number' ? cleanedData.estimatedValue : undefined\n              };\n              \n              validLeadsWithRows.push({ ...lead, rowNumber: i + 1 });\n            } else {\n              // Collect validation errors\n              validationResult.error.errors.forEach(error => {\n                errors.push({\n                  row: i + 1,\n                  field: error.path.join('.'),\n                  message: error.message\n                });\n              });\n            }\n          } catch (error) {\n            errors.push({\n              row: i + 1,\n              message: `Error processing row: ${error instanceof Error ? error.message : 'Unknown error'}`\n            });\n          }\n        }\n        \n        // Detect internal duplicates within the uploaded file\n        const internalDuplicates = detectInternalDuplicates(validLeadsWithRows);\n        \n        // Detect external duplicates against existing leads\n        const externalDuplicates: DuplicateInfo[] = [];\n        for (const leadWithRow of validLeadsWithRows) {\n          const { rowNumber, ...lead } = leadWithRow;\n          const matchedFields: string[] = [];\n          let existingLeadId: string | undefined;\n\n          // Check against existing leads in the database\n          const duplicateExisting = existingLeads.find(existing => {\n            const fieldsMatch: string[] = [];\n            \n            // Check email match\n            if (lead.email && existing.email && \n                normalizeForComparison(lead.email) === normalizeForComparison(existing.email)) {\n              fieldsMatch.push('email');\n            }\n            \n            // Check phone match\n            if (lead.phone && existing.phone && \n                normalizeForComparison(lead.phone) === normalizeForComparison(existing.phone)) {\n              fieldsMatch.push('phone');\n            }\n            \n            // Check name and company combination\n            if (normalizeForComparison(lead.name) === normalizeForComparison(existing.name) &&\n                lead.company && existing.company &&\n                normalizeForComparison(lead.company) === normalizeForComparison(existing.company)) {\n              fieldsMatch.push('name', 'company');\n            }\n            \n            if (fieldsMatch.length > 0) {\n              matchedFields.push(...fieldsMatch);\n              return true;\n            }\n            return false;\n          });\n\n          if (duplicateExisting) {\n            externalDuplicates.push({\n              row: rowNumber,\n              lead,\n              duplicateType: 'external',\n              matchedFields,\n              existingLeadId: duplicateExisting.id\n            });\n          }\n        }\n        \n        // Combine all duplicates\n        const allDuplicates = [...internalDuplicates, ...externalDuplicates];\n        \n        // Remove duplicates from valid leads\n        const duplicateRows = new Set(allDuplicates.map(d => d.row));\n        const finalValidLeads = validLeadsWithRows\n          .filter(leadWithRow => !duplicateRows.has(leadWithRow.rowNumber))\n          .map(({ rowNumber, ...lead }) => lead);\n        \n        resolve({\n          success: finalValidLeads.length > 0 || allDuplicates.length > 0,\n          totalRows: jsonData.length - 1, // Excluding header\n          validLeads: finalValidLeads,\n          errors,\n          duplicates: allDuplicates.length > 0 ? allDuplicates : undefined\n        });\n        \n      } catch (error) {\n        resolve({\n          success: false,\n          totalRows: 0,\n          validLeads: [],\n          errors: [{ \n            row: 0, \n            message: `Error reading file: ${error instanceof Error ? error.message : 'Unknown error'}` \n          }]\n        });\n      }\n    };\n    \n    reader.onerror = () => {\n      resolve({\n        success: false,\n        totalRows: 0,\n        validLeads: [],\n        errors: [{ row: 0, message: 'Error reading file' }]\n      });\n    };\n    \n    reader.readAsArrayBuffer(file);\n  });\n};\n\nexport const createSampleExcelFile = () => {\n  const sampleData = [\n    ['Name', 'Email', 'Phone', 'Company', 'Estimated Value', 'Status', 'Source', 'Notes'],\n    ['John Doe', 'john@example.com', '+1-555-0123', 'Acme Corp', 15000, 'New', 'Website', 'Interested in premium package'],\n    ['Jane Smith', 'jane@techco.com', '+1-555-0124', 'Tech Co', 25000, 'Contacted', 'Referral', 'Needs demo next week'],\n    ['Bob Johnson', 'bob@startup.io', '+1-555-0125', 'Startup Inc', 5000, 'Interested', 'Cold Call', 'Budget approved'],\n    ['Alice Brown', 'alice@corp.com', '', 'Corp Ltd', 30000, 'Meeting', 'LinkedIn', 'Decision maker identified']\n  ];\n  \n  const ws = XLSX.utils.aoa_to_sheet(sampleData);\n  const wb = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(wb, ws, 'Leads');\n  \n  // Generate file and download\n  const fileName = 'sample-leads-template.xlsx';\n  XLSX.writeFile(wb, fileName);\n};","size_bytes":13805}},"version":1}